{"version":3,"sources":["utils/hooks/useTextField.ts","components/FloatButtonsContainer/FloatButtonsContainer.tsx","Pages/Games/atoms.tsx","Pages/Games/Components/List.tsx","Pages/Games/Components/GameAddForm/GameAddForm.tsx","components/QuickGame/extract-address.ts","components/QuickGame/index.jsx","Pages/Games/index.tsx"],"names":["useTextField","initialValue","_useState","useState","_useState2","Object","_home_travis_build_snak1t_planning_poker_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","value","setValue","inputValue","valueToSet","target","FloatButtonsContainer","styled","div","_templateObject","GamesHeader","header","GamesWrapper","section","_templateObject2","GamesList","_useContext","useContext","GamesContext","games","removeGame","user","AuthContext","columns","title","dataIndex","key","render","text","gameItem","react_default","a","createElement","Link","to","concat","info","email","id","isCompleted","es_button","Group","onClick","length","table","rowKey","expandedRowRender","record","style","margin","description","dataSource","auditIcon","icon","type","color","GameAddForm","_ref","onClose","_useTextField","_useTextField2","slicedToArray","setDescription","_useTextField3","_useTextField4","setTitle","addGame","modal","visible","onCancel","onOk","message","es_form","Item","input","prefix","name","placeholder","data-testid","onChange","TextArea","es_radio","defaultValue","buttonStyle","Button","joinWithSlash","join","splitBySlash","split","notEmpty","compose","not","isEmpty","extractAddress","ifElse","equals","filter","replace","window","location","origin","QuickGameInput","QuickGame_templateObject","QuickGame","withRouter","history","handler","string","newUrlAddress","push","goToGame","GamesContainer","modalWindow","setModalWindowVisibility","toggleModalWindow","Fragment","GameAddForm_GameAddForm","QuickGame_QuickGame","List_GamesList","shape","size"],"mappings":"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","file":"static/js/2.e0161047.chunk.js","sourcesContent":["import { useState, ChangeEvent } from 'react';\n\ntype InputElements = HTMLInputElement | HTMLTextAreaElement;\n\ninterface UseTextFieldHandler<T> {\n    (inputValue: ChangeEvent<T>): void;\n}\n\nexport const useTextField = <T extends InputElements>(initialValue: string): [string, UseTextFieldHandler<T>] => {\n    const [value, setValue] = useState(initialValue);\n    const handler: UseTextFieldHandler<T> = inputValue => {\n        const valueToSet = inputValue ? inputValue.target.value : '';\n        setValue(valueToSet);\n    };\n    return [value, handler];\n};\n","import styled from 'styled-components';\n\nexport const FloatButtonsContainer = styled.div`\n    position: fixed;\n    right: 2rem;\n    bottom: 2rem;\n    display: flex;\n    flex-direction: column;\n\n    & > * {\n        margin: 0.5rem 0rem;\n    }\n`;\n","import styled from 'styled-components';\n\nexport const GamesHeader = styled.header`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0.4rem 1rem;\n    h1 {\n        font-size: 1.2rem;\n        line-height: 1.4rem;\n    }\n`;\n\nexport const GamesWrapper = styled.section`\n    padding: 2rem;\n`;\n","import React, { useContext } from 'react';\nimport { GamesWrapper } from '../atoms';\nimport { GamesContext, Game } from '../../../Data/Games/GamesContext';\nimport { Table, Button } from 'antd';\nimport { ColumnProps } from 'antd/lib/table';\nimport { AuthContext } from '../../../Data/Auth/AuthContext';\nimport { Link } from 'react-router-dom';\n\nexport const GamesList: React.SFC<{}> = () => {\n    const { games, removeGame } = useContext(GamesContext);\n    const { user } = useContext(AuthContext);\n\n    const columns: ColumnProps<Game>[] = [\n        {\n            title: 'Title',\n            dataIndex: 'title',\n            key: 'title',\n            render: (text, gameItem) => {\n                return <Link to={`/game/${user.info.email}/${gameItem.id}`}>{text}</Link>;\n            },\n        },\n        {\n            title: 'Amount of stories',\n            dataIndex: 'storiesCount',\n            key: 'storiesCount',\n        },\n        {\n            title: 'Game Completed?',\n            dataIndex: 'isCompleted',\n            key: 'isCompleted',\n            render: (text: string, gameItem: Game) => <span>{gameItem.isCompleted ? 'Yes' : 'No'}</span>,\n        },\n        {\n            title: 'Actions',\n            key: 'actions',\n            render: (text: string, gameItem: Game) => (\n                <Button.Group>\n                    <Button>Edit</Button>\n                    <Button\n                        onClick={() => {\n                            removeGame(gameItem.id);\n                        }}\n                    >\n                        Remove\n                    </Button>\n                </Button.Group>\n            ),\n        },\n    ];\n    return (\n        <GamesWrapper>\n            {games.length === 0 ? (\n                'No games yet'\n            ) : (\n                <Table\n                    rowKey=\"id\"\n                    expandedRowRender={record => (\n                        <p style={{ margin: 0 }}>{record.description || 'No description for game provided'}</p>\n                    )}\n                    columns={columns}\n                    dataSource={games}\n                />\n            )}\n        </GamesWrapper>\n    );\n};\n","import React, { useContext } from 'react';\nimport { Modal, Input, Icon, Radio, Form, message } from 'antd';\nimport { useTextField } from '../../../../utils/hooks/useTextField';\nimport { GamesContext } from '../../../../Data/Games/GamesContext';\n\nconst auditIcon = <Icon type=\"audit\" style={{ color: 'rgba(0,0,0,.25)' }} />;\n\ntype Props = {\n    onClose: () => void;\n};\nexport const GameAddForm: React.SFC<Props> = ({ onClose }) => {\n    const [description, setDescription] = useTextField('');\n    const [title, setTitle] = useTextField('');\n    const { addGame } = useContext(GamesContext);\n    const onSubmit = () => {\n        if (title === '') {\n            return message.info('Each game should have a title');\n        }\n        addGame({ description, title });\n        onClose();\n    };\n    return (\n        <Modal visible={true} title=\"Create new game\" onCancel={onClose} onOk={onSubmit}>\n            <Form.Item>\n                <Input\n                    prefix={auditIcon}\n                    id=\"title\"\n                    name=\"title\"\n                    placeholder=\"Game Title\"\n                    data-testid=\"game-title-input\"\n                    value={title}\n                    onChange={setTitle}\n                />\n            </Form.Item>\n            <Form.Item>\n                <Input.TextArea\n                    id=\"description\"\n                    name=\"description\"\n                    placeholder=\"Optional game description\"\n                    data-testid=\"game-description-input\"\n                    value={description}\n                    onChange={setDescription}\n                />\n            </Form.Item>\n            <Form.Item>\n                <Radio.Group defaultValue=\"fibonacci\" buttonStyle=\"solid\">\n                    <Radio.Button value=\"fibonacci\">Fibonacci</Radio.Button>\n                    <Radio.Button value=\"sizes\">Sizes</Radio.Button>\n                </Radio.Group>\n            </Form.Item>\n        </Modal>\n    );\n};\n","import { compose, replace, concat, split, filter, not, isEmpty, ifElse, join, length, equals } from 'ramda';\n\nconst joinWithSlash: (xs: ReadonlyArray<string>) => string = join('/');\nconst splitBySlash = split('/');\nconst notEmpty = compose(\n    not,\n    isEmpty,\n);\n\nexport const extractAddress: (value: string) => string = compose(\n    ifElse(\n        compose(\n            equals(3),\n            length,\n        ),\n        compose(\n            concat('/'),\n            joinWithSlash,\n        ),\n        compose(\n            concat('/game/'),\n            joinWithSlash,\n        ),\n    ),\n    filter(notEmpty),\n    splitBySlash,\n    replace(window.location.origin, ''),\n);\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { Input, Button, message } from 'antd';\nimport { useTextField } from '../../utils/hooks/useTextField';\nimport { extractAddress } from './extract-address';\n\nconst QuickGameInput = styled.section`\n    width: 300px;\n    margin-right: 10px;\n    margin-left: auto;\n    display: flex;\n`;\n\nexport const QuickGame = withRouter(function QuickGame({ history }) {\n    const [value, handler] = useTextField('');\n    const goToGame = (string, history) => {\n        if (string === '') {\n            message.info('Please insert value in text field');\n            return handler();\n        }\n        const newUrlAddress = extractAddress(string);\n        history.push(newUrlAddress);\n    };\n    return (\n        <QuickGameInput>\n            <Input type=\"text\" value={value} onChange={handler} placeholder=\"Game Url\" />\n            <Button onClick={() => goToGame(value, history)}>Go</Button>\n        </QuickGameInput>\n    );\n});\n","import React, { useState } from 'react';\nimport { not } from 'ramda';\nimport { Button } from 'antd';\n\nimport { GamesList } from './Components/List';\nimport { GameAddForm } from './Components/GameAddForm/GameAddForm';\nimport * as Atoms from './atoms';\nimport { QuickGame } from '../../components/QuickGame';\nimport { RouteComponentProps } from 'react-router';\nimport { FloatButtonsContainer } from '../../components/FloatButtonsContainer/FloatButtonsContainer';\n\nconst GamesContainer: React.SFC<RouteComponentProps> = () => {\n    const [modalWindow, setModalWindowVisibility] = useState(false);\n    const toggleModalWindow = () => setModalWindowVisibility(not);\n\n    return (\n        <>\n            {modalWindow ? <GameAddForm onClose={toggleModalWindow} /> : null}\n            <Atoms.GamesHeader>\n                <h2>Your games</h2>\n                <QuickGame />\n            </Atoms.GamesHeader>\n            <GamesList />\n            <FloatButtonsContainer>\n                <Button onClick={toggleModalWindow} type=\"primary\" shape=\"circle\" icon=\"plus\" size=\"large\" />\n            </FloatButtonsContainer>\n        </>\n    );\n};\n\nexport default GamesContainer;\n"],"sourceRoot":""}