{"version":3,"sources":["utils/hooks/useTextField.js","Pages/Board/Components/Deck/atoms.ts","Data/socket.js","utils/hooks/useSocket.ts","Data/PlaySession/PlayRoomContext.tsx","Pages/Board/Components/Deck/deck.ts","Pages/Board/Components/Deck/Card.tsx","Pages/Board/Components/Deck/index.tsx","utils/average.score.js","Pages/Board/Components/Table/Container.jsx","Pages/Board/Components/Stories/Item.jsx","Data/Stories/type.js","Pages/Board/Components/Stories/Item.form.jsx","Data/Stories/StoriesContext.tsx","Pages/Board/Components/Stories/Item.container.jsx","Pages/Board/Components/Stories/atoms.jsx","Pages/Board/Components/Report/Component.jsx","Pages/Board/Components/Report/Container.jsx","Pages/Board/Components/Stories/List.jsx","Pages/Board/Components/Stories/Form.jsx","Pages/Board/Components/Stories/Container.jsx","Pages/Board/Components/Chat/atoms.js","Pages/Board/Components/Chat/ChatInputArea.jsx","Pages/Board/Components/Chat/ChatMessage.jsx","Pages/Board/Components/Chat/ChatThread.jsx","Pages/Board/Components/Chat/index.jsx","Pages/Board/Components/Player/TemporaryLoginForm.jsx","Pages/Board/Components/Player/atoms.tsx","Pages/Board/Components/Player/Player.tsx","Pages/Board/Components/Player/PlayersList.tsx","Pages/Board/atoms.js","Pages/Board/index.js"],"names":["useTextField","initialValue","_useState","useState","_useState2","Object","_home_travis_build_snak1t_planning_poker_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","value","setValue","inputValue","valueToSet","target","CardListContainer","styled","div","_templateObject","CardContainer","_templateObject2","_ref","cardPicked","_ref2","CardTopLeftCaption","_templateObject3","CardBottomRightCaption","_templateObject4","CardCenterCaption","_templateObject5","CardInnerContainer","_templateObject6","socket","openSocket","process","useSocket","types","useEffect","_arr","entries","_i","length","_ref6","slicedToArray","type","cb","on","_arr2","_i2","_ref5","_ref4","removeEventListener","data","emit","initialState","players","isPlaying","isRevealing","currentStory","PlayRoomContext","React","objectSpread","isCompleted","actions","enterRoom","leaveRoom","setStory","startPlayRound","showPlayedCards","setPlayerScore","resetPlayersScores","users","map","user","score","PlayRoomProvider","children","gameId","isAdmin","_React$useState","_React$useState2","gameStatus","setGameStatus","emitSocket2","self-append-user","newPlayer","prevState","newScores","playerScore","id","startsWith","info","login","append-user","_ref3","concat","emitPatch","apply-play-room-patch","patch","user-left","userId","filter","player","setAndEmitPatch","every","react","Provider","Math","random","storyId","DECK","Card","_ref$onClick","onClick","displayedValue","test","className","toString","_onClick","apply","this","arguments","DeckContainer","useContext","AuthContext","myScore","setMyScore","handleCardPick","name","picture","react_default","a","createElement","card","Card_Card","assign","key","goldenRatio","sqrt","average","converge","divide","sum","getRoundedAverage","compose","ceil","calculateAverageForNumbers","n","round","pow","b","log","extractScores","pluck","divideScoresByType","groupBy","ifElse","is","String","always","calculateStringAnswer","cond","contains","T","calculationCondition","isNil","prop","calculateAverage","TableContainer","_useContext","style","margin","divider","Item","story","setEditMode","deleteStory","onUpdateStory","admin","isStoryActive","resetCurrentStory","buttonRow","icon","Boolean","list","backgroundColor","padding","Meta","title","description","PropTypes","shape","number","isRequired","string","oneOfType","ItemEdit","_useTextField","_useTextField2","newTitle","setTitle","_useTextField3","_useTextField4","newDescription","setDescription","es_form","onSubmit","e","preventDefault","input","placeholder","onChange","TextArea","es_button","htmlType","StoriesContext","stories","addStories","Promise","resolve","updateStory","removeStory","StoriesProvider","setStories","useAsyncEffect","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","ApiClient","get","sent","stop","setUpdatedStoryToStore","updatedStory","prevStories","removeStoryFromState","emitSocket","add-story","newStories","update-story","remove-story","_ref7","_callee2","storiesTitles","_ref8","_context2","active","post","_x","_ref9","_callee3","_ref10","_context3","put","_x2","_ref11","_callee4","_ref12","_context4","delete","params","t0","message","error","_x3","withRouter","props","editMode","allProps","partialStory","Item_Item","Wrapper","atoms_templateObject","Panel","atoms_templateObject2","FormWrapper","atoms_templateObject3","showTotalScore","Report","game","onClose","dataSource","index","modal","visible","footer","onCancel","width","table","columns","dataIndex","sorter","localeCompare","defaultSortOrder","match","reportVisibilityStatus","setReportVisibilityStatus","useCurrentGame","gameID","Fragment","Component_Report","separateStoriesByActivity","partition","StyledList","List","List_templateObject","StoriesPane","itemLayout","renderItem","Item_container","StoryList","_separateStoriesByAct","_separateStoriesByAct2","unplayedStories","playedStories","extra","Container","tabs","defaultActiveKey","TabPane","tab","List_StoriesPane","StoriesForm","mode","toggleMode","handleSubmit","onKeyPress","charCode","allTasks","item","split","StoriesContainer","isAddingStoryMode","setMode","List_StoryList","InputGroup","Chat_atoms_templateObject","ChatButton","Badge","Chat_atoms_templateObject2","ChatInputArea","onSendMessage","event","flexShrink","marginLeft","ChatMessage","avatar","src","ChatThread","threads","renderRow","ChatMessage_ChatMessage","getRowHeight","messageLength","floor","flexGrow","es","height","rowCount","rowHeight","rowRenderer","scrollToIndex","Chat","messages","addMessage","_useState3","_useState4","isOpened","setOpen","_useState5","_useState6","unreadMessages","setUnreadMessages","addMessageToStore","prevMessages","toConsumableArray","emitMessage","message-received","count","size","drawer","placement","closable","mask","display","flexDirection","ChatThread_ChatThread","newMessage","TemporaryLoginForm","replace","history","setLogin","gender","setGender","setTempUser","onOk","label","labelCol","span","wrapperCol","es_switch","checked","switchValue","checkedChildren","unCheckedChildren","UserList","ul","Player_atoms_templateObject","UserItem","li","Player_atoms_templateObject2","UserAvatar","Player_atoms_templateObject3","UserDefaultAvatar","atoms_templateObject4","UserName","atoms_templateObject5","UserScore","atoms_templateObject6","PlayerComponent","_user$info","PlayersList","Player_PlayerComponent","GridWrapper","section","Board_atoms_templateObject","GridHeader","header","Board_atoms_templateObject2","GridStories","Board_atoms_templateObject3","GridPlayers","Board_atoms_templateObject4","GridDeck","Board_atoms_templateObject5","BoardContainer","_useContext2","updateGame","GamesContext","currentGameId","checkIsAdmin","StoriesContext_StoriesProvider","Container_StoriesContainer","PlayersList_PlayersList","BranchBoard","LOGIN_STATUS","LOGGED_IN","TEMP_USER","includes","loginStatus","PlayRoomContext_PlayRoomProvider","Board_BoardContainer","TemporaryLoginForm_TemporaryLoginForm"],"mappings":"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","file":"static/js/3.6cf950e1.chunk.js","sourcesContent":["import { useState } from 'react';\n\nexport const useTextField = initialValue => {\n    const [value, setValue] = useState(initialValue);\n    const handler = inputValue => {\n        const valueToSet = inputValue ? inputValue.target.value : '';\n        setValue(valueToSet);\n    };\n    return [value, handler];\n};\n","import styled from 'styled-components';\n\ntype CardProps = { cardPicked: boolean };\n\nexport const CardListContainer = styled.div`\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n    grid-gap: 0.6rem;\n    background-color: #fff;\n    padding: 0.6rem;\n`;\n\nexport const CardContainer = styled('div')<CardProps>`\n    border: 1px solid #e8e8e8;\n    box-sizing: border-box;\n    margin: 0 0.2rem !important;\n    padding-top: 125%;\n    box-shadow: ${({ cardPicked }) => (cardPicked ? '0px 4px 12px rgba(25, 88, 203, 0.27)' : '')};\n    transform: translateY(${({ cardPicked }) => (cardPicked ? '-2rem' : 0)});\n    cursor: pointer;\n    background-color: #fff;\n    position: relative;\n`;\n\nexport const CardTopLeftCaption = styled.div`\n    font-size: 1.3rem;\n    line-height: 2rem;\n`;\n\nexport const CardBottomRightCaption = styled.div`\n    text-align: right;\n    line-height: 2rem;\n    font-size: 1.3rem;\n`;\n\nexport const CardCenterCaption = styled.div`\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    font-size: 2rem;\n    & span.fa {\n        font-size: 1rem;\n    }\n    & > span.userName {\n        font-size: 1rem;\n    }\n`;\n\nexport const CardInnerContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    padding: 0.6rem 1rem;\n`;\n","import openSocket from 'socket.io-client';\nexport const socket = openSocket(process.env.REACT_APP_API_ENDPOINT);\n","import { useEffect } from 'react';\nimport { socket } from '../../Data/socket';\n\nexport const useSocket = <T extends object>(types: T) => {\n    useEffect(() => {\n        for (let [type, cb] of Object.entries(types)) {\n            socket.on(type, cb);\n        }\n        return () => {\n            for (let [type, cb] of Object.entries(types)) {\n                socket.removeEventListener(type, cb);\n            }\n        };\n    }, []);\n    return (type: string, data: unknown) => {\n        socket.emit(type, data);\n    };\n};\n","import * as React from 'react';\nimport { useSocket } from '../../utils/hooks/useSocket';\n\nexport type Player = {\n    id: string;\n    info: {\n        picture: string | number;\n        login: string;\n    };\n    score: string | number | null;\n};\n\ninterface PlayRoomState {\n    players: Player[];\n    isPlaying: boolean;\n    isRevealing: boolean;\n    currentStory: null | string;\n}\n\ninterface Action<T> {\n    (value: T): void;\n}\n\ninterface PlayRoom extends PlayRoomState {\n    isCompleted: boolean;\n    actions: {\n        enterRoom: Action<Player>;\n        leaveRoom: Action<undefined>;\n        setStory: Action<string | null>;\n        startPlayRound: Action<undefined>;\n        showPlayedCards: Action<undefined>;\n        setPlayerScore: Action<Player>;\n    };\n}\n\nconst initialState: PlayRoomState = {\n    players: [],\n    isPlaying: false,\n    isRevealing: false,\n    currentStory: null,\n};\n\nexport const PlayRoomContext = React.createContext<PlayRoom>({\n    ...initialState,\n    isCompleted: false,\n    actions: {\n        enterRoom: () => {},\n        leaveRoom: () => {},\n        setStory: () => {},\n        startPlayRound: () => {},\n        showPlayedCards: () => {},\n        setPlayerScore: () => {},\n    },\n});\n\ntype SocketListeners = {\n    'append-user': (value: { newPlayer: Player }) => void;\n    'self-append-user': (value: { newPlayer: Player }) => void;\n    'apply-play-room-patch': (value: { patch: Partial<PlayRoomState> }) => void;\n    'user-left': (value: { userId: string }) => void;\n};\n\ntype Props = {\n    gameId: string;\n    isAdmin: boolean;\n};\n\nconst resetPlayersScores = (users: Player[]): Player[] => {\n    return users.map(user => ({ ...user, score: null }));\n};\n\nexport const PlayRoomProvider: React.SFC<Props> = ({ children, gameId, isAdmin }) => {\n    const [gameStatus, setGameStatus] = React.useState(initialState);\n    const emitSocket2 = useSocket<SocketListeners>({\n        'self-append-user': ({ newPlayer }) => {\n            setGameStatus(prevState => {\n                const newScores = prevState.players.map(playerScore =>\n                    playerScore.id.startsWith('temp__') && playerScore.info.login === newPlayer.info.login\n                        ? newPlayer\n                        : playerScore,\n                );\n                return {\n                    ...prevState,\n                    players: newScores,\n                };\n            });\n        },\n        'append-user': ({ newPlayer }) => {\n            setGameStatus(prevState => {\n                const newScores = prevState.players.concat(newPlayer);\n                if (isAdmin) {\n                    emitPatch({ players: newScores });\n                }\n                return { ...prevState, players: newScores };\n            });\n        },\n        'apply-play-room-patch': ({ patch }) => {\n            setGameStatus(prevState => ({ ...prevState, ...patch }));\n        },\n        'user-left': ({ userId }) => {\n            setGameStatus(prevState => ({\n                ...prevState,\n                players: prevState.players.filter(player => player.id !== userId),\n            }));\n        },\n    });\n\n    const enterRoom: Action<Player> = user => {\n        const newPlayer: Player = { ...user, score: null, id: `temp__${Math.random() * 100}` };\n        setGameStatus(prevState => {\n            return {\n                ...prevState,\n                players: prevState.players.concat(newPlayer),\n            };\n        });\n        emitSocket2('enter-room', { gameId, newPlayer });\n    };\n\n    const leaveRoom: Action<undefined> = () => {\n        emitSocket2('leave-room', { gameId });\n    };\n\n    const emitPatch = (patch: Partial<PlayRoomState>): Partial<PlayRoomState> => {\n        emitSocket2('emit-play-room-patch', { gameId, patch });\n        return patch;\n    };\n\n    const setAndEmitPatch = (cb: (prevState: PlayRoomState) => Partial<PlayRoomState>) => {\n        setGameStatus(prevState => {\n            return {\n                ...prevState,\n                ...emitPatch(cb(prevState)),\n            };\n        });\n    };\n\n    const setStory: Action<string | null> = storyId => {\n        setAndEmitPatch(prevState => ({\n            isPlaying: false,\n            isRevealing: false,\n            currentStory: storyId,\n            players: resetPlayersScores(prevState.players),\n        }));\n    };\n\n    const startPlayRound: Action<undefined> = () => {\n        setAndEmitPatch(prevState => ({\n            isPlaying: true,\n            isRevealing: false,\n            players: resetPlayersScores(prevState.players),\n        }));\n    };\n\n    const showPlayedCards: Action<undefined> = () => {\n        setAndEmitPatch(() => ({\n            isPlaying: false,\n            isRevealing: true,\n        }));\n    };\n\n    const setPlayerScore: Action<Player> = playerScore => {\n        setAndEmitPatch(prevState => ({\n            players: prevState.players.map(player =>\n                player.info.login === playerScore.info.login ? playerScore : player,\n            ),\n        }));\n    };\n\n    const isCompleted = gameStatus.players.every(player => player.score !== null);\n    // TODO: memoize provider value to fix unneeded re-renders\n    return (\n        <PlayRoomContext.Provider\n            value={{\n                ...gameStatus,\n                isCompleted,\n                actions: { enterRoom, setStory, startPlayRound, showPlayedCards, setPlayerScore, leaveRoom },\n            }}\n        >\n            {children}\n        </PlayRoomContext.Provider>\n    );\n};\n","export type Score = number | string;\n\nexport type DeckCard = {\n    value: Score;\n};\n\nexport const DECK: DeckCard[] = [\n    { value: 1 },\n    { value: 2 },\n    { value: 3 },\n    { value: 5 },\n    { value: 8 },\n    { value: 13 },\n    { value: 21 },\n    { value: 34 },\n    { value: 55 },\n    { value: 89 },\n    { value: 'question' },\n    { value: '\\u221e' },\n    { value: 'coffee' },\n];\n","import * as React from 'react';\n\nimport * as Atoms from './atoms';\nimport { Score } from './deck';\n\ntype Props = {\n    value: Score;\n    cardPicked: boolean;\n    onClick: (value: Score) => void;\n};\n\nexport const Card: React.SFC<Props> = ({ value, onClick = () => {}, cardPicked }) => {\n    const displayedValue: string | JSX.Element =\n        typeof value === 'string' ? (\n            /^\\w/.test(value) ? (\n                <span className={`fa fa-${value}`} />\n            ) : (\n                value\n            )\n        ) : (\n            value.toString()\n        );\n    return (\n        <Atoms.CardContainer onClick={() => onClick(value)} cardPicked={cardPicked}>\n            <Atoms.CardInnerContainer>\n                <Atoms.CardTopLeftCaption>{displayedValue}</Atoms.CardTopLeftCaption>\n                <Atoms.CardCenterCaption>\n                    <span>{displayedValue}</span>\n                </Atoms.CardCenterCaption>\n                <Atoms.CardBottomRightCaption>{displayedValue}</Atoms.CardBottomRightCaption>\n            </Atoms.CardInnerContainer>\n        </Atoms.CardContainer>\n    );\n};\n","import React, { useState, useContext } from 'react';\n\nimport * as Atoms from './atoms';\n\nimport { AuthContext } from '../../../../Data/Auth/AuthContext';\nimport { PlayRoomContext } from '../../../../Data/PlaySession/PlayRoomContext';\nimport { Score, DECK } from './deck';\nimport { Card } from './Card';\n\ntype TempUser = {\n    user: {\n        info: {\n            name: string;\n            picture: string;\n        };\n    };\n};\n\nexport function DeckContainer() {\n    const { user } = useContext(AuthContext) as TempUser;\n    const { actions } = useContext(PlayRoomContext);\n    const [myScore, setMyScore] = useState<Score | null>(null);\n    const handleCardPick = (score: Score) => {\n        setMyScore(score);\n        actions.setPlayerScore({\n            info: {\n                login: user.info.name,\n                picture: user.info.picture,\n            },\n            score,\n            id: `temp__${Math.random() * 100}`,\n        });\n    };\n    return (\n        <Atoms.CardListContainer>\n            {DECK.map((card, id) => (\n                <Card key={`card${id}`} cardPicked={card.value === myScore} {...card} onClick={handleCardPick} />\n            ))}\n        </Atoms.CardListContainer>\n    );\n}\n","import compose from 'ramda/src/compose'\nimport converge from 'ramda/src/converge'\nimport map from 'ramda/src/map'\nimport pluck from 'ramda/src/pluck'\nimport sum from 'ramda/src/sum'\nimport length from 'ramda/src/length'\nimport divide from 'ramda/src/divide'\nimport ifElse from 'ramda/src/ifElse'\nimport is from 'ramda/src/is'\nimport cond from 'ramda/src/cond'\nimport contains from 'ramda/src/contains'\nimport always from 'ramda/src/always'\nimport groupBy from 'ramda/src/groupBy'\nimport prop from 'ramda/src/prop'\nimport isNil from 'ramda/src/isNil'\nimport T from 'ramda/src/T'\n\nconst goldenRatio = (1 + Math.sqrt(5)) / 2\n\nconst log = (a, b) => Math.log(b) / Math.log(a)\n\nconst findFiboOrdinal = value =>\n  Math.round(log(goldenRatio, Math.sqrt(5) * value))\n\nconst findByOrdinal = n =>\n  Math.round(\n    (Math.pow(goldenRatio, n) - Math.pow(-goldenRatio, -n)) /\n      (2 * goldenRatio - 1)\n  )\n\nconst average = converge(divide, [sum, length])\n\nconst getRoundedAverage = compose(Math.ceil, average)\n\nconst calculateAverageForNumbers = compose(\n  findByOrdinal,\n  getRoundedAverage,\n  map(findFiboOrdinal)\n)\n\nconst extractScores = pluck('score')\n\nconst divideScoresByType = groupBy(\n  ifElse(is(String), always('string'), always('number'))\n)\n\nconst calculateStringAnswer = cond([\n  [contains('coffee'), always('Coffee break')],\n  [contains('question'), always('Unclear')],\n  [contains('\\u221e'), always('Infinity')],\n  [T, always('Unclear')]\n])\n\nconst calculationCondition = ifElse(\n  compose(isNil, prop('string')),\n  compose(calculateAverageForNumbers, prop('number')),\n  compose(calculateStringAnswer, prop('string'))\n)\n\nexport const calculateAverage = compose(\n  calculationCondition,\n  divideScoresByType,\n  extractScores\n)\n","import React, { useContext } from 'react';\nimport { Divider } from 'antd';\n\nimport { PlayRoomContext } from '../../../../Data/PlaySession/PlayRoomContext';\nimport { calculateAverage } from '../../../../utils/average.score';\n\nexport function TableContainer() {\n    const { players, isRevealing, currentStory } = useContext(PlayRoomContext);\n\n    if (currentStory === '' || currentStory === null) return null;\n    return (\n        <section style={{ margin: '0 10px' }}>\n            {isRevealing ? <Divider>Average Score is {calculateAverage(players)}</Divider> : null}\n        </section>\n    );\n}\n","import React, { useContext } from 'react';\nimport { List, Icon } from 'antd';\nimport { PlayRoomContext } from '../../../../Data/PlaySession/PlayRoomContext';\nimport { calculateAverage } from '../../../../utils/average.score';\n\nexport const Item = ({ story, setEditMode, deleteStory, onUpdateStory, admin }) => {\n    const { currentStory, isRevealing, isCompleted, players, actions } = useContext(PlayRoomContext);\n    const setCurrentStory = id => actions.setStory(id);\n    const isStoryActive = story.id === currentStory;\n    const resetCurrentStory = () => actions.setStory(null);\n    const setScore = () => {\n        onUpdateStory({\n            score: calculateAverage(players),\n        });\n        resetCurrentStory();\n    };\n\n    const buttonRow = !admin\n        ? []\n        : [\n              isStoryActive ? null : <Icon type=\"star\" onClick={() => setCurrentStory(story.id)} />,\n              isStoryActive ? null : <Icon type=\"delete\" onClick={() => deleteStory(story.id)} />,\n              isStoryActive && !isCompleted ? <Icon type=\"play-circle\" onClick={actions.startPlayRound} /> : null,\n              isCompleted && !isRevealing ? <Icon type=\"question-circle\" onClick={actions.showPlayedCards} /> : null,\n              isRevealing ? <Icon type=\"check-circle\" onClick={setScore} /> : null,\n              isRevealing ? <Icon type=\"reload\" onClick={actions.startPlayRound} /> : null,\n              <Icon type=\"edit\" onClick={setEditMode} />,\n              isStoryActive ? <Icon type=\"close-circle\" onClick={resetCurrentStory} /> : null,\n          ].filter(Boolean);\n\n    return (\n        <List.Item\n            actions={buttonRow}\n            style={{\n                backgroundColor: isStoryActive ? '#e6f7fe' : '#fff',\n                padding: '.4rem',\n            }}\n        >\n            <List.Item.Meta\n                title={`${story.title} ${story.score !== 0 ? ` - ${story.score} sp` : ''}`}\n                description={story.description}\n            />\n        </List.Item>\n    );\n};\n","import PropTypes from 'prop-types';\n\nexport const storyType = PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    score: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Input, Button, Form } from 'antd';\n\nimport './styles.css';\nimport { useTextField } from '../../../../utils/hooks/useTextField';\nimport { storyType } from '../../../../Data/Stories/type';\n\nexport function ItemEdit({ story, onUpdateStory, setEditMode }) {\n    const [newTitle, setTitle] = useTextField(story.title || '');\n    const [newDescription, setDescription] = useTextField(story.description || '');\n\n    const saveItem = e => {\n        e.preventDefault();\n        onUpdateStory({\n            title: newTitle,\n            description: newDescription,\n        });\n        setEditMode();\n    };\n\n    return (\n        <Form onSubmit={saveItem}>\n            <header className=\"Stories-storyHeader\">\n                <Input placeholder=\"title of the story\" value={newTitle} onChange={setTitle} />\n            </header>\n            <div className=\"Stories-storyDescription\">\n                <Input.TextArea placeholder=\"Description\" value={newDescription} onChange={setDescription} />\n            </div>\n            <footer className=\"Stories-storyFooter\">\n                <Button onClick={() => setEditMode(false)}>Cancel</Button>\n                <Button htmlType=\"submit\" type=\"primary\">\n                    Save\n                </Button>\n            </footer>\n        </Form>\n    );\n}\n\nItemEdit.propTypes = {\n    story: storyType,\n    setEditMode: PropTypes.func.isRequired,\n    onUpdateStory: PropTypes.func.isRequired,\n};\n","import * as React from 'react';\n\nimport { message } from 'antd';\nimport { useAsyncEffect } from '../../utils/hooks/useAsyncEffect';\nimport { ApiClient } from '../../utils/api-client';\nimport { useSocket } from '../../utils/hooks/useSocket';\n\ntype Story = {\n    id: string;\n    description: string;\n    score: number | string;\n    title: string;\n};\n\ntype ContextState = {\n    stories: Story[];\n    actions: {\n        addStories: (title: Array<{ title: string }>) => Promise<void>;\n        updateStory: (story: Story) => Promise<void>;\n        removeStory: (storyId: string) => Promise<void>;\n    };\n};\nexport const StoriesContext = React.createContext<ContextState>({\n    stories: [],\n    actions: {\n        addStories: () => Promise.resolve(),\n        updateStory: () => Promise.resolve(),\n        removeStory: () => Promise.resolve(),\n    },\n});\n\ntype Props = {\n    gameId: string;\n};\n\ntype SocketListeners = {\n    'add-story': (data: { stories: Story[] }) => void;\n    'update-story': (data: { story: Story }) => void;\n    'remove-story': (data: { id: string }) => void;\n};\n\nexport const StoriesProvider: React.SFC<Props> = ({ children, gameId }) => {\n    const [stories, setStories] = React.useState<Story[]>([]);\n    useAsyncEffect(\n        async () => {\n            const { data } = await ApiClient.get(`/api/game/${gameId}`);\n            setStories(data.stories || []);\n        },\n        [gameId],\n    );\n\n    const setUpdatedStoryToStore = (updatedStory: Story): void => {\n        setStories(prevStories =>\n            prevStories.map(story => {\n                if (story.id === updatedStory.id) {\n                    return { ...story, ...updatedStory };\n                }\n                return story;\n            }),\n        );\n    };\n\n    const removeStoryFromState = (id: string) => {\n        setStories(prevStories => prevStories.filter(story => story.id !== id));\n    };\n\n    const emitSocket = useSocket<SocketListeners>({\n        'add-story': ({ stories: newStories }) => {\n            setStories(prevState => prevState.concat(newStories));\n        },\n        'update-story': ({ story }) => {\n            setUpdatedStoryToStore(story);\n        },\n        'remove-story': ({ id }) => {\n            removeStoryFromState(id);\n        },\n    });\n\n    const addStories = async (storiesTitles: Array<{ title: string }>) => {\n        const stories: Partial<Story>[] = storiesTitles.map(story => ({\n            description: '',\n            active: false,\n            score: 0,\n            ...story,\n        }));\n        const { data }: { data: Story[] } = await ApiClient.post('/api/story', { stories, gameId });\n        setStories(prevStories => prevStories.concat(data));\n        emitSocket('emit-add-story', { stories: data });\n    };\n\n    const updateStory = async (story: Story) => {\n        const { data }: { data: Story } = await ApiClient.put('/api/story', story);\n        setUpdatedStoryToStore(data);\n        emitSocket('emit-update-story', { story: data });\n    };\n\n    const removeStory = async (storyId: string) => {\n        try {\n            const { data } = await ApiClient.delete('/api/story', { params: { storyId } });\n            removeStoryFromState(data.id);\n            emitSocket('emit-remove-story', data);\n        } catch (error) {\n            message.error(error.message);\n        }\n    };\n    return (\n        <StoriesContext.Provider value={{ stories, actions: { addStories, updateStory, removeStory } }}>\n            {children}\n        </StoriesContext.Provider>\n    );\n};\n","import React, { useState, useContext } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport { Item } from './Item';\nimport { ItemEdit } from './Item.form';\nimport { StoriesContext } from '../../../../Data/Stories/StoriesContext';\n\nfunction StoryItem(props) {\n    const [editMode, setEditMode] = useState(false);\n    const { actions } = useContext(StoriesContext);\n    const onUpdateStory = partialStory => {\n        actions.updateStory({ ...props.story, ...partialStory });\n    };\n    const allProps = { ...props, onUpdateStory, deleteStory: actions.removeStory, setEditMode, editMode };\n    return editMode ? <ItemEdit {...allProps} /> : <Item {...allProps} />;\n}\n\nexport default withRouter(StoryItem);\n","import styled from 'styled-components';\nimport { Card } from 'antd';\n\nconst Wrapper = styled(Card)`\n    width: 100%;\n`;\n\nconst Panel = styled.div`\n    display: flex;\n    flex-direction: column;\n`;\n\nconst FormWrapper = styled.div`\n    margin: 1rem 0;\n`;\n\nexport { Wrapper, Panel, FormWrapper };\n","import React from 'react';\nimport compose from 'ramda/src/compose';\nimport pluck from 'ramda/src/pluck';\nimport sum from 'ramda/src/sum';\nimport { Modal, Button, Table } from 'antd';\n\nconst showTotalScore = compose(\n    sum,\n    pluck('score'),\n);\n\nexport const Report = ({ game, stories, onClose }) => {\n    const columns = [\n        {\n            title: 'Story Tile',\n            dataIndex: 'title',\n            sorter: (a, b) => a.title.localeCompare(b.title),\n        },\n        {\n            title: 'Description',\n            dataIndex: 'description',\n        },\n        {\n            title: 'Story Points',\n            dataIndex: 'score',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.score - b.score,\n        },\n    ];\n    const dataSource = stories.map((story, index) => ({ ...story, key: index }));\n\n    return (\n        <Modal\n            visible={true}\n            title={`Report for \"${game.title}\"`}\n            footer={[\n                <Button onClick={onClose} key=\"ok-button\">\n                    Ok\n                </Button>,\n            ]}\n            onCancel={onClose}\n            width=\"800px\"\n        >\n            <Table\n                dataSource={dataSource}\n                columns={columns}\n                title={() => `Total Score ${showTotalScore(stories)}`}\n                footer={() => `Report generated By FreePlanningPoker`}\n            />\n        </Modal>\n    );\n};\n","import React, { useState, useContext } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport { Report } from './Component';\nimport { useCurrentGame } from '../../../../Data/Games/GamesContext';\nimport { Icon } from 'antd';\nimport { StoriesContext } from '../../../../Data/Stories/StoriesContext';\n\nexport function ReportContainer({ match: { params } }) {\n    const [reportVisibilityStatus, setReportVisibilityStatus] = useState(false);\n    const { stories } = useContext(StoriesContext);\n    const game = useCurrentGame(params.gameID);\n\n    const prepareReport = () => setReportVisibilityStatus(true);\n    const closeReport = () => setReportVisibilityStatus(false);\n\n    return (\n        <>\n            <Icon type=\"printer\" onClick={prepareReport} />\n            {reportVisibilityStatus ? <Report game={game} stories={stories} onClose={closeReport} /> : null}\n        </>\n    );\n}\n\nexport default withRouter(ReportContainer);\n","import React from 'react';\nimport { Tabs, List } from 'antd';\nimport PropTypes from 'prop-types';\nimport partition from 'ramda/src/partition';\nimport length from 'ramda/src/length';\nimport styled from 'styled-components';\n\nimport StoryItem from './Item.container';\nimport './styles.css';\nimport { storyType } from '../../../../Data/Stories/type';\nimport { Wrapper } from './atoms';\nimport ReportContainer from '../Report/Container';\n\nconst separateStoriesByActivity = partition(story => story.score === 0);\n\nconst StyledList = styled(List)`\n    height: 370px;\n    overflow: scroll;\n`;\n\nconst StoriesPane = ({ stories, admin }) =>\n    length(stories) === 0 ? (\n        <span>No stories</span>\n    ) : (\n        <StyledList\n            itemLayout=\"vertical\"\n            dataSource={stories}\n            renderItem={story => <StoryItem admin={admin} key={story.id} story={story} />}\n        />\n    );\n\nexport const StoryList = ({ stories, admin }) => {\n    const [unplayedStories, playedStories] = separateStoriesByActivity(stories);\n\n    return (\n        <Wrapper title=\"Stories\" extra={length(unplayedStories) === 0 ? <ReportContainer /> : null}>\n            <Tabs defaultActiveKey=\"1\">\n                <Tabs.TabPane tab=\"Remaining\" key=\"1\">\n                    <StoriesPane stories={unplayedStories} admin={admin} />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Played\" key=\"2\">\n                    <StoriesPane stories={playedStories} admin={admin} />\n                </Tabs.TabPane>\n            </Tabs>\n        </Wrapper>\n    );\n};\n\nStoryList.propTypes = {\n    stories: PropTypes.arrayOf(storyType),\n    admin: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport split from 'ramda/src/split';\nimport map from 'ramda/src/map';\nimport { Button, Input } from 'antd';\nimport { FormWrapper } from './atoms';\nimport { useTextField } from '../../../../utils/hooks/useTextField';\n\nexport function StoriesForm({ mode, toggleMode, isAdmin, handleSubmit }) {\n    const [value, setValue] = useTextField('');\n\n    const handleToggleMode = () => toggleMode(!mode);\n\n    const handleKeyPress = ({ charCode }) => {\n        if (charCode !== 13) {\n            return;\n        }\n        const allTasks = map(item => ({ title: item }), split('\\n', value));\n        handleSubmit(allTasks);\n        toggleMode(mode);\n        setValue();\n    };\n\n    if (!isAdmin) {\n        return null;\n    }\n    return (\n        <FormWrapper>\n            {mode ? (\n                <Input.TextArea\n                    placeholder=\"Story title\"\n                    value={value}\n                    onKeyPress={handleKeyPress}\n                    onChange={setValue}\n                />\n            ) : (\n                <Button onClick={handleToggleMode}>Add new Story</Button>\n            )}\n        </FormWrapper>\n    );\n}\n\nStoriesForm.propTypes = {\n    mode: PropTypes.bool.isRequired,\n    isAdmin: PropTypes.bool.isRequired,\n    toggleMode: PropTypes.func.isRequired,\n    handleSubmit: PropTypes.func.isRequired,\n};\n","import React, { useState, useContext } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport { StoryList } from './List';\nimport './styles.css';\nimport { Panel } from './atoms';\nimport { StoriesForm } from './Form';\nimport { StoriesContext } from '../../../../Data/Stories/StoriesContext';\n\nexport const StoriesContainer = withRouter(function StoriesContainer({ admin, match: { params } }) {\n    const [isAddingStoryMode, setMode] = useState(false);\n    const { stories, actions } = useContext(StoriesContext);\n\n    return (\n        <Panel>\n            <StoryList stories={stories} admin={admin} />\n            <StoriesForm\n                handleSubmit={actions.addStories}\n                toggleMode={setMode}\n                isAdmin={admin}\n                mode={isAddingStoryMode}\n            />\n        </Panel>\n    );\n});\n","import styled from 'styled-components';\nimport { Badge } from 'antd';\n\nexport const InputGroup = styled.div`\n    display: flex;\n    justify-content: space-between;\n`;\n\nexport const ChatButton = styled(Badge)`\n    position: fixed !important;\n    right: 2rem;\n    bottom: 2rem;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Divider, Button, Input } from 'antd';\nimport { InputGroup } from './atoms';\nimport { useTextField } from '../../../../utils/hooks/useTextField';\n\nexport function ChatInputArea({ onSendMessage }) {\n    const [value, setValue] = useTextField('');\n\n    const handleSubmit = () => {\n        if (value === '') return;\n        onSendMessage(value);\n        setValue();\n    };\n\n    const handleKeyDown = event => {\n        if (event.charCode === 13) {\n            return handleSubmit();\n        }\n    };\n\n    return (\n        <>\n            <Divider />\n            <InputGroup>\n                <Input name=\"chat\" onKeyPress={handleKeyDown} value={value} onChange={setValue} />\n                <Button\n                    type=\"primary\"\n                    shape=\"circle\"\n                    icon=\"enter\"\n                    onClick={handleSubmit}\n                    style={{ flexShrink: 0, marginLeft: '0.6rem' }}\n                />\n            </InputGroup>\n        </>\n    );\n}\n\nChatInputArea.propTypes = {\n    onSendMessage: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { List, Avatar } from 'antd';\n\nexport const ChatMessage = ({ user, message, style }) => {\n    return (\n        <List.Item style={style}>\n            <List.Item.Meta avatar={<Avatar src={user.picture} />} title={user.name} description={message} />\n        </List.Item>\n    );\n};\n\nChatMessage.propTypes = {\n    user: PropTypes.shape({\n        login: PropTypes.string.isRequired,\n    }),\n    message: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { List, AutoSizer } from 'react-virtualized';\n\nimport { ChatMessage } from './ChatMessage';\n\nexport const ChatThread = ({ threads }) => {\n    const renderRow = ({ index, key, style }) => {\n        return <ChatMessage {...threads[index]} key={key} style={style} />;\n    };\n\n    const getRowHeight = ({ index }) => {\n        const { message } = threads[index];\n        const messageLength = message.length;\n        return 60 + (Math.floor(messageLength / 50) + 1) * 20;\n    };\n\n    return (\n        <div style={{ flexGrow: 1 }}>\n            <AutoSizer>\n                {({ width, height }) => (\n                    <List\n                        rowCount={threads.length}\n                        width={width}\n                        height={height}\n                        rowHeight={getRowHeight}\n                        rowRenderer={renderRow}\n                        scrollToIndex={threads.length - 1}\n                    />\n                )}\n            </AutoSizer>\n        </div>\n    );\n};\n\nChatThread.propTypes = {\n    threads: PropTypes.arrayOf(\n        PropTypes.shape({\n            user: PropTypes.shape({\n                login: PropTypes.string.isRequired,\n            }),\n            message: PropTypes.string.isRequired,\n        }),\n    ),\n};\n","import React, { useContext, useState } from 'react';\nimport { Drawer, Button } from 'antd';\n\nimport { ChatInputArea } from './ChatInputArea';\nimport { ChatThread } from './ChatThread';\nimport { AuthContext } from '../../../../Data/Auth/AuthContext';\nimport { ChatButton } from './atoms';\nimport { useSocket } from '../../../../utils/hooks/useSocket';\n\nexport function Chat() {\n    const { user } = useContext(AuthContext);\n    const [messages, addMessage] = useState([]);\n    const [isOpened, setOpen] = useState(false);\n    const [unreadMessages, setUnreadMessages] = useState(messages.length);\n    if (isOpened && unreadMessages !== 0) {\n        setUnreadMessages(0);\n    }\n    const addMessageToStore = message => {\n        addMessage(prevMessages => {\n            return [...prevMessages, message];\n        });\n    };\n    const emitMessage = useSocket({\n        'message-received': message => {\n            setUnreadMessages(prev => prev + 1);\n            addMessageToStore(message);\n        },\n    });\n    const sendMessage = message => {\n        const newMessage = { user: user.info, message };\n        addMessageToStore(newMessage);\n        emitMessage('send-message', newMessage);\n    };\n    return (\n        <>\n            <ChatButton count={unreadMessages}>\n                <Button onClick={() => setOpen(true)} type=\"primary\" shape=\"circle\" icon=\"message\" size=\"large\" />\n            </ChatButton>\n            <Drawer\n                width={520}\n                placement=\"right\"\n                closable={false}\n                onClose={() => setOpen(false)}\n                visible={isOpened}\n                mask={true}\n                style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    height: '100%',\n                }}\n            >\n                <ChatThread threads={messages} />\n                <ChatInputArea onSendMessage={sendMessage} />\n            </Drawer>\n        </>\n    );\n}\n","import React, { useContext, useState } from 'react';\nimport { Modal, Input, Form, Switch, Icon } from 'antd';\nimport { useTextField } from '../../../../utils/hooks/useTextField';\nimport { AuthContext } from '../../../../Data/Auth/AuthContext';\n\nexport const TemporaryLoginForm = ({ history: { replace } }) => {\n    const [login, setLogin] = useTextField('');\n    const [gender, setGender] = useState('male');\n    const { setTempUser } = useContext(AuthContext);\n\n    const onSubmit = event => {\n        event.preventDefault();\n        setTempUser(login, gender);\n    };\n    const handleChange = switchValue => setGender(switchValue ? 'female' : 'male');\n    return (\n        <div>\n            <Modal visible={true} title=\"Sit a game in progress\" onCancel={() => replace('/')} onOk={onSubmit}>\n                <Form.Item label=\"Login\" labelCol={{ span: 6 }} wrapperCol={{ span: 14 }}>\n                    <Input id=\"login\" name=\"login\" placeholder=\"Your desired login\" value={login} onChange={setLogin} />\n                </Form.Item>\n                <Form.Item label=\"Gender\" labelCol={{ span: 6 }} wrapperCol={{ span: 14 }}>\n                    <Switch\n                        checked={gender === 'female'}\n                        onChange={handleChange}\n                        checkedChildren={<Icon type=\"man\" />}\n                        unCheckedChildren={<Icon type=\"woman\" />}\n                    />\n                </Form.Item>\n            </Modal>\n        </div>\n    );\n};\n","import styled from 'styled-components';\n\nexport const UserList = styled.ul`\n    list-style-type: none;\n    padding: 1rem;\n    background-color: #fff;\n    display: flex;\n    flex-wrap: wrap;\n`;\nexport const UserItem = styled.li`\n    padding: 0.8rem;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    position: relative;\n`;\nexport const UserAvatar = styled('div')<{ avatar: string }>`\n    width: 6.6rem;\n    height: 6.6rem;\n    background-image: url(${({ avatar }) => avatar});\n    background-size: contain;\n    border-radius: 50%;\n`;\n\nexport const UserDefaultAvatar = styled('div')<{ avatar: number }>`\n    width: 6.6rem;\n    height: 6.6rem;\n    background-image: url(/assets/avatars.jpg);\n    background-position-y: ${({ avatar }) => `-${55 + Math.floor(avatar / 6) * 130}px`};\n    background-position-x: ${({ avatar }) => `-${15 + ((avatar + 6) % 6) * 95}px`};\n    background-size: 600px;\n`;\nexport const UserName = styled.div`\n    text-align: center;\n`;\n\nexport const UserScore = styled.div`\n    position: absolute;\n    left: calc(50% + 2rem);\n    top: 0.5rem;\n    width: 2rem;\n    height: 2rem;\n    background-color: #52c41a;\n    color: #fff;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 50%;\n`;\n","import * as React from 'react';\nimport * as Atoms from './atoms';\nimport { PlayRoomContext, Player } from '../../../../Data/PlaySession/PlayRoomContext';\n\ntype Props = {\n    user: Player;\n};\n\nconst renderScore = (score: string | number, shouldShowScore: boolean): string => {\n    if (!shouldShowScore) {\n        return '?';\n    }\n    if (typeof score === 'number') {\n        return score.toString();\n    }\n    return score[0];\n};\n\nexport const PlayerComponent: React.SFC<Props> = ({ user }) => {\n    const { isRevealing } = React.useContext(PlayRoomContext);\n    const { picture, login } = user.info;\n    return (\n        <Atoms.UserItem>\n            {typeof picture === 'number' ? (\n                <Atoms.UserDefaultAvatar avatar={picture} />\n            ) : (\n                <Atoms.UserAvatar avatar={picture} />\n            )}\n            <Atoms.UserName>{login}</Atoms.UserName>\n            {user.score !== null ? <Atoms.UserScore>{renderScore(user.score, isRevealing)}</Atoms.UserScore> : null}\n        </Atoms.UserItem>\n    );\n};\n","import * as React from 'react';\nimport * as Atoms from './atoms';\nimport { PlayRoomContext } from '../../../../Data/PlaySession/PlayRoomContext';\nimport { PlayerComponent } from './Player';\n\nexport const PlayersList: React.SFC<{}> = () => {\n    const { players } = React.useContext(PlayRoomContext);\n    return (\n        <Atoms.UserList>\n            {players.map((player, index) => (\n                <PlayerComponent key={index} user={player} />\n            ))}\n        </Atoms.UserList>\n    );\n};\n","import styled from 'styled-components';\nexport const GridWrapper = styled.section`\n    display: grid;\n    padding: 1rem;\n    width: 100%;\n    height: 100%;\n    grid-gap: 2rem;\n    grid-template-columns: 20rem 1fr;\n    grid-template-rows: 2rem;\n`;\n\nexport const GridHeader = styled.header`\n    grid-column: 1 / span 2;\n`;\n\nexport const GridStories = styled.section`\n    grid-row: 2 / span 2;\n`;\n\nexport const GridPlayers = styled.section`\n    grid-row: 2 / span 1;\n`;\n\nexport const GridDeck = styled.section`\n    grid-row: 3 / span 1;\n`;\n","import React, { useEffect, useContext } from 'react';\nimport { message } from 'antd';\n\nimport { DeckContainer } from './Components/Deck';\nimport { TableContainer } from './Components/Table/Container';\nimport { StoriesContainer } from './Components/Stories/Container';\nimport { Chat } from './Components/Chat';\nimport { TemporaryLoginForm } from './Components/Player/TemporaryLoginForm';\nimport { useAsyncEffect } from '../../utils/hooks/useAsyncEffect';\nimport { GamesContext, useCurrentGame } from '../../Data/Games/GamesContext';\nimport { PlayRoomProvider, PlayRoomContext } from '../../Data/PlaySession/PlayRoomContext';\nimport { StoriesProvider } from '../../Data/Stories/StoriesContext';\nimport { AuthContext, LOGIN_STATUS, checkIsAdmin } from '../../Data/Auth/AuthContext';\nimport { ApiClient } from '../../utils/api-client';\nimport { PlayersList } from './Components/Player/PlayersList';\nimport * as Atoms from './atoms';\n\nexport const BoardContainer = ({ match }) => {\n    const { user } = useContext(AuthContext);\n    const { isPlaying, actions } = useContext(PlayRoomContext);\n    const { updateGame } = useContext(GamesContext);\n    const currentGameId = match.params.gameID;\n    const game = useCurrentGame(currentGameId);\n    useEffect(() => {\n        actions.enterRoom({\n            info: {\n                login: user.info.name,\n                picture: user.info.picture,\n            },\n        });\n        return actions.leaveRoom;\n    }, []);\n    useAsyncEffect(\n        async () => {\n            try {\n                const { data } = await ApiClient.get(`/api/game/${currentGameId}`);\n                updateGame(data);\n            } catch (error) {\n                message.error(error.message);\n            }\n        },\n        [currentGameId],\n    );\n    const isAdmin = checkIsAdmin(user, match.params.user);\n    if (!game) {\n        return <h1>No game</h1>;\n    }\n    return (\n        <StoriesProvider gameId={currentGameId}>\n            <Atoms.GridWrapper>\n                <Atoms.GridHeader>\n                    <h2>{game.title}</h2>\n                </Atoms.GridHeader>\n                <Atoms.GridStories>\n                    <StoriesContainer admin={isAdmin} />\n                </Atoms.GridStories>\n                <Atoms.GridPlayers>\n                    <PlayersList />\n                </Atoms.GridPlayers>\n                <Atoms.GridDeck>\n                    <TableContainer admin={isAdmin} />\n                    {isPlaying ? <DeckContainer /> : null}\n                </Atoms.GridDeck>\n            </Atoms.GridWrapper>\n            <Chat />\n        </StoriesProvider>\n    );\n};\n\nexport default function BranchBoard(props) {\n    const { user } = useContext(AuthContext);\n    const isAdmin = checkIsAdmin(user, props.match.params.user);\n    if ([LOGIN_STATUS.LOGGED_IN, LOGIN_STATUS.TEMP_USER].includes(user.loginStatus)) {\n        return (\n            <PlayRoomProvider gameId={props.match.params.gameID} isAdmin={isAdmin}>\n                <BoardContainer {...props} />\n            </PlayRoomProvider>\n        );\n    }\n    return <TemporaryLoginForm {...props} />;\n}\n"],"sourceRoot":""}