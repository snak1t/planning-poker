{"version":3,"sources":["utils/hooks/useTextField.ts","components/FloatButtonsContainer/FloatButtonsContainer.tsx","Pages/Games/atoms.tsx","Pages/Games/Components/EditedGameContext/EditedGameContext.tsx","Pages/Games/Components/GamesTable/GamesTable.tsx","Pages/Games/Components/GamesContainer/GamesContainer.tsx","Pages/Games/Components/GameAddForm/GameAddForm.tsx","components/QuickGame/extract-address.ts","components/QuickGame/index.jsx","Pages/Games/index.tsx"],"names":["useTextField","initialValue","_useState","useState","_useState2","Object","_home_travis_build_snak1t_planning_poker_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","value","setValue","inputValue","valueToSet","target","FloatButtonsContainer","styled","div","_templateObject","GamesHeader","header","GamesWrapper","section","_templateObject2","EditedGameContext","React","createContext","game","updateField","submitGame","EditedGameProvider","_ref","onSubmit","children","slicedToArray","clonedGame","updateClonedGame","useEffect","react_default","a","createElement","Provider","key","prevGame","objectSpread","defineProperty","GamesTable","games","getLinkUrl","onRemoveGame","onSetGameForEdit","onCancelEditing","_useContext","useContext","editedGame","columns","title","dataIndex","render","text","gameItem","id","input","onChange","event","data-testid","Link","to","isCompleted","es_button","Group","Fragment","type","onClick","table","rowKey","defaultExpandAllRows","expandedRowRender","record","description","style","margin","dataSource","GamesContainer","GamesContext","removeGame","updateGame","editGameId","setEditGameId","currentlyEditedGame","find","user","AuthContext","length","EditedGameContext_EditedGameProvider","GamesTable_GamesTable","concat","info","email","auditIcon","icon","color","GameAddForm","onClose","_useTextField","_useTextField2","setDescription","_useTextField3","_useTextField4","setTitle","addGame","modal","visible","onCancel","onOk","message","es_form","Item","prefix","name","placeholder","TextArea","es_radio","defaultValue","buttonStyle","Button","joinWithSlash","join","splitBySlash","split","notEmpty","compose","not","isEmpty","extractAddress","ifElse","equals","filter","replace","window","location","origin","QuickGameInput","QuickGame_templateObject","QuickGame","withRouter","history","handler","string","newUrlAddress","push","goToGame","GamesPage","modalWindow","setModalWindowVisibility","toggleModalWindow","GameAddForm_GameAddForm","QuickGame_QuickGame","GamesContainer_GamesContainer","shape","size"],"mappings":"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","file":"static/js/2.73fc2fea.chunk.js","sourcesContent":["import { useState, ChangeEvent } from 'react';\n\ntype InputElements = HTMLInputElement | HTMLTextAreaElement;\n\ninterface UseTextFieldHandler<T> {\n    (inputValue: ChangeEvent<T>): void;\n}\n\nexport const useTextField = <T extends InputElements>(initialValue: string): [string, UseTextFieldHandler<T>] => {\n    const [value, setValue] = useState(initialValue);\n    const handler: UseTextFieldHandler<T> = inputValue => {\n        const valueToSet = inputValue ? inputValue.target.value : '';\n        setValue(valueToSet);\n    };\n    return [value, handler];\n};\n","import styled from 'styled-components';\n\nexport const FloatButtonsContainer = styled.div`\n    position: fixed;\n    right: 2rem;\n    bottom: 2rem;\n    display: flex;\n    flex-direction: column;\n\n    & > * {\n        margin: 0.5rem 0rem;\n    }\n`;\n","import styled from 'styled-components';\n\nexport const GamesHeader = styled.header`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0.4rem 1rem;\n    h1 {\n        font-size: 1.2rem;\n        line-height: 1.4rem;\n    }\n`;\n\nexport const GamesWrapper = styled.section`\n    padding: 2rem;\n`;\n","import React, { useState, useEffect } from 'react';\nimport { Game } from '../../../../Data/Games/GamesContext';\n\ntype EditedGameContextType = {\n  game: Game | null;\n  updateField<T extends keyof Game>(field: T, value: Game[T]): void;\n  submitGame: () => void;\n};\n\ntype EditedGameProps = {\n  game: Game | null;\n  onSubmit: (game: Game) => void;\n};\n\nexport const EditedGameContext = React.createContext<EditedGameContextType>({\n  game: null,\n  updateField: () => {},\n  submitGame: () => {},\n});\n\nexport const EditedGameProvider: React.SFC<EditedGameProps> = ({\n  game,\n  onSubmit,\n  children,\n}) => {\n  const [clonedGame, updateClonedGame] = useState<Game | null>(game);\n  useEffect(\n    () => {\n      updateClonedGame(game);\n    },\n    [game],\n  );\n  const updateField: EditedGameContextType['updateField'] = (key, value) => {\n    return updateClonedGame(prevGame =>\n      prevGame ? { ...prevGame, [key]: value } : null,\n    );\n  };\n\n  const submitGame: EditedGameContextType['submitGame'] = () => {\n    if (clonedGame) {\n      onSubmit(clonedGame);\n    }\n  };\n\n  return (\n    <EditedGameContext.Provider\n      value={{ game: clonedGame, updateField, submitGame }}\n    >\n      {children}\n    </EditedGameContext.Provider>\n  );\n};\n","import React, { useContext } from 'react';\nimport { Game } from '../../../../Data/Games/GamesContext';\nimport { Table, Button, Input } from 'antd';\nimport { ColumnProps } from 'antd/lib/table';\nimport { Link } from 'react-router-dom';\nimport { EditedGameContext } from '../EditedGameContext/EditedGameContext';\n\ntype Props = {\n  games: Game[];\n  getLinkUrl: (id: string) => string;\n  onRemoveGame: (id: string) => void;\n  onSetGameForEdit: (id: string) => void;\n  onCancelEditing: () => void;\n};\n\nexport const GamesTable: React.SFC<Props> = ({\n  games,\n  getLinkUrl,\n  onRemoveGame,\n  onSetGameForEdit,\n  onCancelEditing,\n}) => {\n  const { game: editedGame, updateField, submitGame } = useContext(\n    EditedGameContext,\n  );\n  const columns: ColumnProps<Game>[] = [\n    {\n      title: 'Title',\n      dataIndex: 'title',\n      key: 'title',\n      render: (text, gameItem) => {\n        if (editedGame && gameItem.id === editedGame.id) {\n          return (\n            <Input\n              value={editedGame.title}\n              onChange={event => updateField('title', event.target.value)}\n              data-testid=\"game-title-input\"\n            />\n          );\n        }\n        return (\n          <Link to={getLinkUrl(gameItem.id)}>\n            <span data-testid=\"game-title\">{text}</span>\n          </Link>\n        );\n      },\n    },\n    {\n      title: 'Amount of stories',\n      dataIndex: 'storiesCount',\n      key: 'storiesCount',\n    },\n    {\n      title: 'Game Completed?',\n      dataIndex: 'isCompleted',\n      key: 'isCompleted',\n      render: (text: string, gameItem: Game) => (\n        <span>{gameItem.isCompleted ? 'Yes' : 'No'}</span>\n      ),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (text: string, gameItem: Game) => (\n        <Button.Group>\n          {editedGame && editedGame.id === gameItem.id ? (\n            <>\n              <Button\n                type=\"primary\"\n                onClick={submitGame}\n                data-testid=\"game-submit-button\"\n              >\n                Update game\n              </Button>\n              <Button\n                onClick={onCancelEditing}\n                data-testid=\"game-cancel-edit-btn\"\n              >\n                Cancel\n              </Button>\n            </>\n          ) : (\n            <>\n              {gameItem.isCompleted ? null : (\n                <Button\n                  onClick={() => {\n                    onSetGameForEdit(gameItem.id);\n                  }}\n                  data-testid=\"game-edit-btn\"\n                >\n                  Edit\n                </Button>\n              )}\n              <Button\n                onClick={() => {\n                  onRemoveGame(gameItem.id);\n                }}\n                data-testid=\"game-remove-btn\"\n              >\n                Remove\n              </Button>\n            </>\n          )}\n        </Button.Group>\n      ),\n    },\n  ];\n  return (\n    <Table\n      rowKey=\"id\"\n      defaultExpandAllRows={true}\n      expandedRowRender={(record: Game) =>\n        editedGame && editedGame.id === record.id ? (\n          <Input\n            data-testid=\"game-description-input\"\n            value={editedGame.description}\n            onChange={event => updateField('description', event.target.value)}\n          />\n        ) : (\n          <p style={{ margin: 0 }}>\n            {record.description || 'No description for game provided'}\n          </p>\n        )\n      }\n      columns={columns}\n      dataSource={games}\n    />\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport { GamesWrapper } from '../../atoms';\nimport { GamesContext } from '../../../../Data/Games/GamesContext';\nimport { AuthContext } from '../../../../Data/Auth/AuthContext';\nimport { GamesTable } from '../GamesTable/GamesTable';\nimport { EditedGameProvider } from '../EditedGameContext/EditedGameContext';\n\nexport const GamesContainer: React.SFC<{}> = () => {\n  const { games, removeGame, updateGame } = useContext(GamesContext);\n  const [editGameId, setEditGameId] = useState<null | string>(null);\n  const currentlyEditedGame =\n    games.find(game => game.id === editGameId) || null;\n  const { user } = useContext(AuthContext);\n  return (\n    <GamesWrapper>\n      {games.length === 0 ? (\n        <h2>No games yet</h2>\n      ) : (\n        <EditedGameProvider\n          game={currentlyEditedGame}\n          onSubmit={game => {\n            updateGame(game);\n            setEditGameId(null);\n          }}\n        >\n          <GamesTable\n            getLinkUrl={id => `/game/${user.info.email}/${id}`}\n            games={games}\n            onRemoveGame={removeGame}\n            onSetGameForEdit={setEditGameId}\n            onCancelEditing={() => {\n              setEditGameId(null);\n            }}\n          />\n        </EditedGameProvider>\n      )}\n    </GamesWrapper>\n  );\n};\n","import React, { useContext } from 'react';\nimport { Modal, Input, Icon, Radio, Form, message } from 'antd';\nimport { useTextField } from '../../../../utils/hooks/useTextField';\nimport { GamesContext } from '../../../../Data/Games/GamesContext';\n\nconst auditIcon = <Icon type=\"audit\" style={{ color: 'rgba(0,0,0,.25)' }} />;\n\ntype Props = {\n    onClose: () => void;\n};\nexport const GameAddForm: React.SFC<Props> = ({ onClose }) => {\n    const [description, setDescription] = useTextField('');\n    const [title, setTitle] = useTextField('');\n    const { addGame } = useContext(GamesContext);\n    const onSubmit = () => {\n        if (title === '') {\n            return message.info('Each game should have a title');\n        }\n        addGame({ description, title });\n        onClose();\n    };\n    return (\n        <Modal visible={true} title=\"Create new game\" onCancel={onClose} onOk={onSubmit}>\n            <Form.Item>\n                <Input\n                    prefix={auditIcon}\n                    id=\"title\"\n                    name=\"title\"\n                    placeholder=\"Game Title\"\n                    data-testid=\"game-title-input\"\n                    value={title}\n                    onChange={setTitle}\n                />\n            </Form.Item>\n            <Form.Item>\n                <Input.TextArea\n                    id=\"description\"\n                    name=\"description\"\n                    placeholder=\"Optional game description\"\n                    data-testid=\"game-description-input\"\n                    value={description}\n                    onChange={setDescription}\n                />\n            </Form.Item>\n            <Form.Item>\n                <Radio.Group defaultValue=\"fibonacci\" buttonStyle=\"solid\">\n                    <Radio.Button value=\"fibonacci\">Fibonacci</Radio.Button>\n                    <Radio.Button value=\"sizes\">Sizes</Radio.Button>\n                </Radio.Group>\n            </Form.Item>\n        </Modal>\n    );\n};\n","import { compose, replace, concat, split, filter, not, isEmpty, ifElse, join, length, equals } from 'ramda';\n\nconst joinWithSlash: (xs: ReadonlyArray<string>) => string = join('/');\nconst splitBySlash = split('/');\nconst notEmpty = compose(\n    not,\n    isEmpty,\n);\n\nexport const extractAddress: (value: string) => string = compose(\n    ifElse(\n        compose(\n            equals(3),\n            length,\n        ),\n        compose(\n            concat('/'),\n            joinWithSlash,\n        ),\n        compose(\n            concat('/game/'),\n            joinWithSlash,\n        ),\n    ),\n    filter(notEmpty),\n    splitBySlash,\n    replace(window.location.origin, ''),\n);\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { Input, Button, message } from 'antd';\nimport { useTextField } from '../../utils/hooks/useTextField';\nimport { extractAddress } from './extract-address';\n\nconst QuickGameInput = styled.section`\n    width: 300px;\n    margin-right: 10px;\n    margin-left: auto;\n    display: flex;\n`;\n\nexport const QuickGame = withRouter(function QuickGame({ history }) {\n    const [value, handler] = useTextField('');\n    const goToGame = (string, history) => {\n        if (string === '') {\n            message.info('Please insert value in text field');\n            return handler();\n        }\n        const newUrlAddress = extractAddress(string);\n        history.push(newUrlAddress);\n    };\n    return (\n        <QuickGameInput>\n            <Input type=\"text\" value={value} onChange={handler} placeholder=\"Game Url\" />\n            <Button onClick={() => goToGame(value, history)}>Go</Button>\n        </QuickGameInput>\n    );\n});\n","import React, { useState } from 'react';\nimport { not } from 'ramda';\nimport { Button } from 'antd';\n\nimport { GamesContainer } from './Components/GamesContainer/GamesContainer';\nimport { GameAddForm } from './Components/GameAddForm/GameAddForm';\nimport * as Atoms from './atoms';\nimport { QuickGame } from '../../components/QuickGame';\nimport { RouteComponentProps } from 'react-router';\nimport { FloatButtonsContainer } from '../../components/FloatButtonsContainer/FloatButtonsContainer';\n\nconst GamesPage: React.SFC<RouteComponentProps> = () => {\n    const [modalWindow, setModalWindowVisibility] = useState(false);\n    const toggleModalWindow = () => setModalWindowVisibility(not);\n\n    return (\n        <>\n            {modalWindow ? <GameAddForm onClose={toggleModalWindow} /> : null}\n            <Atoms.GamesHeader>\n                <h2>Your games</h2>\n                <QuickGame />\n            </Atoms.GamesHeader>\n            <GamesContainer />\n            <FloatButtonsContainer>\n                <Button onClick={toggleModalWindow} type=\"primary\" shape=\"circle\" icon=\"plus\" size=\"large\" />\n            </FloatButtonsContainer>\n        </>\n    );\n};\n\nexport default GamesPage;\n"],"sourceRoot":""}