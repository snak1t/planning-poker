{"version":3,"sources":["utils/hooks/useTextField.js","Pages/Board/Components/Deck/atoms.ts","Data/socket.js","utils/hooks/useSocket.ts","Data/PlaySession/PlayRoomContext.tsx","Pages/Board/Components/Deck/deck.ts","Pages/Board/Components/Deck/Card.tsx","Pages/Board/Components/Deck/index.tsx","utils/average.score.js","Pages/Board/Components/RoundResults/TableResult.tsx","Pages/Board/Components/Table/Container.tsx","Pages/Board/Components/Stories/Item.tsx","Pages/Board/Components/Stories/Item.form.jsx","Data/Stories/StoriesContext.tsx","Pages/Board/Components/Stories/StoryItem.tsx","Data/Stories/type.js","Pages/Board/Components/Stories/atoms.jsx","Pages/Board/Components/Report/Component.jsx","Pages/Board/Components/Report/Container.jsx","Pages/Board/Components/Stories/List.jsx","Pages/Board/Components/Stories/Form.jsx","Pages/Board/Components/Stories/Container.jsx","Pages/Board/Components/Player/TemporaryLoginForm.jsx","Pages/Board/Components/Player/atoms.tsx","Pages/Board/Components/Player/Player.tsx","Pages/Board/Components/Player/PlayersList.tsx","Pages/Board/atoms.js","Pages/Board/Components/Chat/atoms.js","Pages/Board/Components/Chat/ChatInputArea.jsx","Pages/Board/Components/Chat/ChatMessage.jsx","Pages/Board/Components/Chat/ChatThread.jsx","Pages/Board/Components/Chat/index.jsx","Pages/Board/Components/ActionButton/atoms.ts","Pages/Board/Components/ActionButton/ActionButtons.tsx","Pages/Board/index.js"],"names":["useTextField","initialValue","_useState","useState","_useState2","Object","_home_travis_build_snak1t_planning_poker_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","value","setValue","inputValue","valueToSet","target","CardListContainer","styled","div","_templateObject","CardContainer","_templateObject2","_ref","cardPicked","_ref2","CardTopLeftCaption","_templateObject3","CardBottomRightCaption","_templateObject4","CardCenterCaption","_templateObject5","CardInnerContainer","_templateObject6","socket","openSocket","process","useSocket","types","useEffect","_arr","entries","_i","length","_ref6","slicedToArray","type","cb","on","_arr2","_i2","_ref5","_ref4","removeEventListener","data","emit","initialState","players","isPlaying","isRevealing","currentStory","PlayRoomContext","React","objectSpread","isCompleted","actions","enterRoom","leaveRoom","setStory","startPlayRound","showPlayedCards","setPlayerScore","resetPlayersScores","users","map","user","score","PlayRoomProvider","children","gameId","isAdmin","_React$useState","_React$useState2","gameStatus","setGameStatus","emitSocket2","self-append-user","newPlayer","prevState","newScores","playerScore","id","startsWith","info","login","append-user","_ref3","concat","emitPatch","apply-play-room-patch","patch","user-left","userId","filter","player","setAndEmitPatch","every","react","Provider","Math","random","storyId","DECK","StringScoreMap","coffee","question","âˆž","comparator","a","b","max","min","numberComparator","Card","_ref$onClick","onClick","displayedValue","test","className","toString","_onClick","apply","this","arguments","DeckContainer","useContext","AuthContext","myScore","setMyScore","handleCardPick","name","picture","react_default","createElement","card","Card_Card","assign","key","goldenRatio","sqrt","average","converge","divide","sum","getRoundedAverage","compose","ceil","calculateAverageForNumbers","n","round","pow","log","extractScores","pluck","divideScoresByType","groupBy","ifElse","is","String","always","calculateStringAnswer","cond","contains","T","calculationCondition","isNil","prop","calculateAverage","columns","title","dataIndex","sorter","localeCompare","defaultSortOrder","TableResult","table","dataSource","pagination","TableContainer","_useContext","Fragment","divider","TableResult_TableResult","Item","story","onSetEditMode","deleteStory","isStoryActive","buttonRow","icon","Boolean","list","style","backgroundColor","padding","Meta","description","ItemEdit","onUpdateStory","_useTextField","_useTextField2","newTitle","setTitle","_useTextField3","_useTextField4","newDescription","setDescription","es_form","onSubmit","e","preventDefault","input","placeholder","onChange","TextArea","es_button","htmlType","StoriesContext","stories","addStories","Promise","resolve","updateStory","removeStory","StoriesProvider","setStories","useAsyncEffect","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","ApiClient","get","sent","stop","setUpdatedStoryToStore","updatedStory","prevStories","removeStoryFromState","emitSocket","add-story","newStories","update-story","remove-story","_ref7","_callee2","storiesTitles","_ref8","_context2","active","post","_x","_ref9","_callee3","_ref10","_context3","put","_x2","_ref11","_callee4","_ref12","_context4","delete","params","t0","message","error","_x3","withRouter","props","editMode","setEditMode","partialStory","Item_Item","PropTypes","shape","number","isRequired","string","oneOfType","Wrapper","atoms_templateObject","Panel","atoms_templateObject2","FormWrapper","atoms_templateObject3","showTotalScore","Report","game","onClose","index","modal","visible","footer","onCancel","width","match","reportVisibilityStatus","setReportVisibilityStatus","useCurrentGame","gameID","Component_Report","separateStoriesByActivity","partition","StyledList","List","List_templateObject","StoriesPane","admin","itemLayout","renderItem","Stories_StoryItem","StoryList","_separateStoriesByAct","_separateStoriesByAct2","unplayedStories","playedStories","extra","Container","tabs","defaultActiveKey","TabPane","tab","List_StoriesPane","StoriesForm","mode","toggleMode","handleSubmit","onKeyPress","charCode","allTasks","item","split","StoriesContainer","isAddingStoryMode","setMode","List_StoryList","TemporaryLoginForm","replace","history","setLogin","gender","setGender","setTempUser","onOk","event","label","labelCol","span","wrapperCol","es_switch","checked","switchValue","checkedChildren","unCheckedChildren","UserList","ul","Player_atoms_templateObject","UserItem","li","Player_atoms_templateObject2","UserAvatar","Player_atoms_templateObject3","avatar","UserDefaultAvatar","atoms_templateObject4","floor","UserName","atoms_templateObject5","UserScore","atoms_templateObject6","PlayerComponent","_user$info","PlayersList","Player_PlayerComponent","GridWrapper","section","Board_atoms_templateObject","GridHeader","header","Board_atoms_templateObject2","GridStories","Board_atoms_templateObject3","GridPlayers","Board_atoms_templateObject4","GridDeck","Board_atoms_templateObject5","InputGroup","Chat_atoms_templateObject","ChatButton","Badge","Chat_atoms_templateObject2","ChatInputArea","onSendMessage","flexShrink","marginLeft","ChatMessage","src","ChatThread","threads","renderRow","ChatMessage_ChatMessage","getRowHeight","messageLength","flexGrow","es","height","rowCount","rowHeight","rowRenderer","scrollToIndex","Chat","messages","addMessage","_useState3","_useState4","isOpened","setOpen","_useState5","_useState6","unreadMessages","setUnreadMessages","addMessageToStore","prevMessages","toConsumableArray","emitMessage","message-received","count","size","drawer","placement","closable","mask","display","flexDirection","ChatThread_ChatThread","newMessage","FloatContainer","ActionButton_atoms_templateObject","ActionButtons","_useContext2","storiesActions","activeStory","find","resetCurrentStory","tooltip","BoardContainer","updateGame","GamesContext","currentGameId","checkIsAdmin","StoriesContext_StoriesProvider","Container_StoriesContainer","PlayersList_PlayersList","ActionButtons_ActionButtons","BranchBoard","LOGIN_STATUS","LOGGED_IN","TEMP_USER","includes","loginStatus","PlayRoomContext_PlayRoomProvider","Board_BoardContainer","TemporaryLoginForm_TemporaryLoginForm"],"mappings":"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","file":"static/js/3.4a46f3fe.chunk.js","sourcesContent":["import { useState } from 'react';\n\nexport const useTextField = initialValue => {\n    const [value, setValue] = useState(initialValue);\n    const handler = inputValue => {\n        const valueToSet = inputValue ? inputValue.target.value : '';\n        setValue(valueToSet);\n    };\n    return [value, handler];\n};\n","import styled from 'styled-components';\n\ntype CardProps = { cardPicked: boolean };\n\nexport const CardListContainer = styled.div`\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n    grid-gap: 0.6rem;\n    background-color: #fff;\n    padding: 0.6rem;\n`;\n\nexport const CardContainer = styled('div')<CardProps>`\n    border: 1px solid #e8e8e8;\n    box-sizing: border-box;\n    margin: 0 0.2rem !important;\n    padding-top: 125%;\n    box-shadow: ${({ cardPicked }) => (cardPicked ? '0px 4px 12px rgba(25, 88, 203, 0.27)' : '')};\n    transform: translateY(${({ cardPicked }) => (cardPicked ? '-2rem' : 0)});\n    cursor: pointer;\n    background-color: #fff;\n    position: relative;\n`;\n\nexport const CardTopLeftCaption = styled.div`\n    font-size: 1.3rem;\n    line-height: 2rem;\n`;\n\nexport const CardBottomRightCaption = styled.div`\n    text-align: right;\n    line-height: 2rem;\n    font-size: 1.3rem;\n`;\n\nexport const CardCenterCaption = styled.div`\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    font-size: 2rem;\n    & span.fa {\n        font-size: 1rem;\n    }\n    & > span.userName {\n        font-size: 1rem;\n    }\n`;\n\nexport const CardInnerContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    padding: 0.6rem 1rem;\n`;\n","import openSocket from 'socket.io-client';\nexport const socket = openSocket(process.env.REACT_APP_API_ENDPOINT);\n","import { useEffect } from 'react';\nimport { socket } from '../../Data/socket';\n\nexport const useSocket = <T extends object>(types: T) => {\n    useEffect(() => {\n        for (let [type, cb] of Object.entries(types)) {\n            socket.on(type, cb);\n        }\n        return () => {\n            for (let [type, cb] of Object.entries(types)) {\n                socket.removeEventListener(type, cb);\n            }\n        };\n    }, []);\n    return (type: string, data: unknown) => {\n        socket.emit(type, data);\n    };\n};\n","import * as React from 'react';\nimport { useSocket } from '../../utils/hooks/useSocket';\nimport { Score } from '../../Pages/Board/Components/Deck/deck';\n\nexport type Player = {\n    id: string;\n    info: {\n        picture: string | number;\n        login: string;\n    };\n    score: Score;\n};\n\ninterface PlayRoomState {\n    players: Player[];\n    isPlaying: boolean;\n    isRevealing: boolean;\n    currentStory: null | string;\n}\n\ninterface Action<T> {\n    (value: T): void;\n}\n\ninterface PlayRoom extends PlayRoomState {\n    isCompleted: boolean;\n    actions: {\n        enterRoom: Action<Player>;\n        leaveRoom: Action<any>;\n        setStory: Action<string | null>;\n        startPlayRound: Action<any>;\n        showPlayedCards: Action<any>;\n        setPlayerScore: Action<Player>;\n    };\n}\n\nconst initialState: PlayRoomState = {\n    players: [],\n    isPlaying: false,\n    isRevealing: false,\n    currentStory: null,\n};\n\nexport const PlayRoomContext = React.createContext<PlayRoom>({\n    ...initialState,\n    isCompleted: false,\n    actions: {\n        enterRoom: () => {},\n        leaveRoom: () => {},\n        setStory: () => {},\n        startPlayRound: () => {},\n        showPlayedCards: () => {},\n        setPlayerScore: () => {},\n    },\n});\n\ntype SocketListeners = {\n    'append-user': (value: { newPlayer: Player }) => void;\n    'self-append-user': (value: { newPlayer: Player }) => void;\n    'apply-play-room-patch': (value: { patch: Partial<PlayRoomState> }) => void;\n    'user-left': (value: { userId: string }) => void;\n};\n\ntype Props = {\n    gameId: string;\n    isAdmin: boolean;\n};\n\nconst resetPlayersScores = (users: Player[]): Player[] => {\n    return users.map(user => ({ ...user, score: null }));\n};\n\nexport const PlayRoomProvider: React.SFC<Props> = ({ children, gameId, isAdmin }) => {\n    const [gameStatus, setGameStatus] = React.useState(initialState);\n    const emitSocket2 = useSocket<SocketListeners>({\n        'self-append-user': ({ newPlayer }) => {\n            setGameStatus(prevState => {\n                const newScores = prevState.players.map(playerScore =>\n                    playerScore.id.startsWith('temp__') && playerScore.info.login === newPlayer.info.login\n                        ? newPlayer\n                        : playerScore,\n                );\n                return {\n                    ...prevState,\n                    players: newScores,\n                };\n            });\n        },\n        'append-user': ({ newPlayer }) => {\n            setGameStatus(prevState => {\n                const newScores = prevState.players.concat(newPlayer);\n                if (isAdmin) {\n                    emitPatch({ players: newScores });\n                }\n                return { ...prevState, players: newScores };\n            });\n        },\n        'apply-play-room-patch': ({ patch }) => {\n            setGameStatus(prevState => ({ ...prevState, ...patch }));\n        },\n        'user-left': ({ userId }) => {\n            setGameStatus(prevState => ({\n                ...prevState,\n                players: prevState.players.filter(player => player.id !== userId),\n            }));\n        },\n    });\n\n    const enterRoom: Action<Player> = user => {\n        const newPlayer: Player = { ...user, score: null, id: `temp__${Math.random() * 100}` };\n        setGameStatus(prevState => {\n            return {\n                ...prevState,\n                players: prevState.players.concat(newPlayer),\n            };\n        });\n        emitSocket2('enter-room', { gameId, newPlayer });\n    };\n\n    const leaveRoom: Action<any> = () => {\n        emitSocket2('leave-room', { gameId });\n    };\n\n    const emitPatch = (patch: Partial<PlayRoomState>): Partial<PlayRoomState> => {\n        emitSocket2('emit-play-room-patch', { gameId, patch });\n        return patch;\n    };\n\n    const setAndEmitPatch = (cb: (prevState: PlayRoomState) => Partial<PlayRoomState>) => {\n        setGameStatus(prevState => {\n            return {\n                ...prevState,\n                ...emitPatch(cb(prevState)),\n            };\n        });\n    };\n\n    const setStory: Action<string | null> = storyId => {\n        setAndEmitPatch(prevState => ({\n            isPlaying: false,\n            isRevealing: false,\n            currentStory: storyId,\n            players: resetPlayersScores(prevState.players),\n        }));\n    };\n\n    const startPlayRound: Action<any> = () => {\n        setAndEmitPatch(prevState => ({\n            isPlaying: true,\n            isRevealing: false,\n            players: resetPlayersScores(prevState.players),\n        }));\n    };\n\n    const showPlayedCards: Action<any> = () => {\n        setAndEmitPatch(() => ({\n            isPlaying: false,\n            isRevealing: true,\n        }));\n    };\n\n    const setPlayerScore: Action<Player> = playerScore => {\n        setAndEmitPatch(prevState => ({\n            players: prevState.players.map(player =>\n                player.info.login === playerScore.info.login ? playerScore : player,\n            ),\n        }));\n    };\n\n    const isCompleted = gameStatus.players.every(player => player.score !== null);\n    // TODO: memoize provider value to fix unneeded re-renders\n    return (\n        <PlayRoomContext.Provider\n            value={{\n                ...gameStatus,\n                isCompleted,\n                actions: { enterRoom, setStory, startPlayRound, showPlayedCards, setPlayerScore, leaveRoom },\n            }}\n        >\n            {children}\n        </PlayRoomContext.Provider>\n    );\n};\n","type StringScore = 'coffee' | 'question' | '\\u221e';\nexport type Score = number | StringScore | null;\n\nexport type DeckCard = {\n    value: Score;\n};\n\nexport const DECK: DeckCard[] = [\n    { value: 1 },\n    { value: 2 },\n    { value: 3 },\n    { value: 5 },\n    { value: 8 },\n    { value: 13 },\n    { value: 21 },\n    { value: 34 },\n    { value: 55 },\n    { value: 89 },\n    { value: 'question' },\n    { value: '\\u221e' },\n    { value: 'coffee' },\n];\n\nconst StringScoreMap = {\n    coffee: 100,\n    question: 200,\n    '\\u221e': 300,\n};\n\nconst numberComparator = (a: number, b: number): 1 | -1 | 0 => {\n    return Math.max(Math.min(1, a - b), -1) as 1 | -1 | 0;\n};\n\nexport const comparator = (a: Score, b: Score): 1 | -1 | 0 => {\n    if (a === null) {\n        return -1;\n    }\n    if (b === null) {\n        return 1;\n    }\n    const aValue = typeof a === 'number' ? a : StringScoreMap[a];\n    const bValue = typeof b === 'number' ? b : StringScoreMap[b];\n    return numberComparator(aValue, bValue);\n};\n","import * as React from 'react';\n\nimport * as Atoms from './atoms';\nimport { Score } from './deck';\n\ntype Props = {\n    value: Score;\n    cardPicked: boolean;\n    onClick: (value: Score) => void;\n};\n\nexport const Card: React.SFC<Props> = ({ value, onClick = () => {}, cardPicked }) => {\n    const displayedValue: string | JSX.Element =\n        typeof value === 'string' ? (\n            /^\\w/.test(value) ? (\n                <span className={`fa fa-${value}`} />\n            ) : (\n                value\n            )\n        ) : value === null ? (\n            ''\n        ) : (\n            value.toString()\n        );\n    return (\n        <Atoms.CardContainer onClick={() => onClick(value)} cardPicked={cardPicked}>\n            <Atoms.CardInnerContainer>\n                <Atoms.CardTopLeftCaption>{displayedValue}</Atoms.CardTopLeftCaption>\n                <Atoms.CardCenterCaption>\n                    <span>{displayedValue}</span>\n                </Atoms.CardCenterCaption>\n                <Atoms.CardBottomRightCaption>{displayedValue}</Atoms.CardBottomRightCaption>\n            </Atoms.CardInnerContainer>\n        </Atoms.CardContainer>\n    );\n};\n","import React, { useState, useContext } from 'react';\n\nimport * as Atoms from './atoms';\n\nimport { AuthContext } from '../../../../Data/Auth/AuthContext';\nimport { PlayRoomContext } from '../../../../Data/PlaySession/PlayRoomContext';\nimport { Score, DECK } from './deck';\nimport { Card } from './Card';\n\ntype TempUser = {\n    user: {\n        info: {\n            name: string;\n            picture: string;\n        };\n    };\n};\n\nexport function DeckContainer() {\n    const { user } = useContext(AuthContext) as TempUser;\n    const { actions } = useContext(PlayRoomContext);\n    const [myScore, setMyScore] = useState<Score | null>(null);\n    const handleCardPick = (score: Score) => {\n        setMyScore(score);\n        actions.setPlayerScore({\n            info: {\n                login: user.info.name,\n                picture: user.info.picture,\n            },\n            score,\n            id: `temp__${Math.random() * 100}`,\n        });\n    };\n    return (\n        <Atoms.CardListContainer>\n            {DECK.map((card, id) => (\n                <Card key={`card${id}`} cardPicked={card.value === myScore} {...card} onClick={handleCardPick} />\n            ))}\n        </Atoms.CardListContainer>\n    );\n}\n","import compose from 'ramda/src/compose'\nimport converge from 'ramda/src/converge'\nimport map from 'ramda/src/map'\nimport pluck from 'ramda/src/pluck'\nimport sum from 'ramda/src/sum'\nimport length from 'ramda/src/length'\nimport divide from 'ramda/src/divide'\nimport ifElse from 'ramda/src/ifElse'\nimport is from 'ramda/src/is'\nimport cond from 'ramda/src/cond'\nimport contains from 'ramda/src/contains'\nimport always from 'ramda/src/always'\nimport groupBy from 'ramda/src/groupBy'\nimport prop from 'ramda/src/prop'\nimport isNil from 'ramda/src/isNil'\nimport T from 'ramda/src/T'\n\nconst goldenRatio = (1 + Math.sqrt(5)) / 2\n\nconst log = (a, b) => Math.log(b) / Math.log(a)\n\nconst findFiboOrdinal = value =>\n  Math.round(log(goldenRatio, Math.sqrt(5) * value))\n\nconst findByOrdinal = n =>\n  Math.round(\n    (Math.pow(goldenRatio, n) - Math.pow(-goldenRatio, -n)) /\n      (2 * goldenRatio - 1)\n  )\n\nconst average = converge(divide, [sum, length])\n\nconst getRoundedAverage = compose(Math.ceil, average)\n\nconst calculateAverageForNumbers = compose(\n  findByOrdinal,\n  getRoundedAverage,\n  map(findFiboOrdinal)\n)\n\nconst extractScores = pluck('score')\n\nconst divideScoresByType = groupBy(\n  ifElse(is(String), always('string'), always('number'))\n)\n\nconst calculateStringAnswer = cond([\n  [contains('coffee'), always('Coffee break')],\n  [contains('question'), always('Unclear')],\n  [contains('\\u221e'), always('Infinity')],\n  [T, always('Unclear')]\n])\n\nconst calculationCondition = ifElse(\n  compose(isNil, prop('string')),\n  compose(calculateAverageForNumbers, prop('number')),\n  compose(calculateStringAnswer, prop('string'))\n)\n\nexport const calculateAverage = compose(\n  calculationCondition,\n  divideScoresByType,\n  extractScores\n)\n","import React from 'react';\nimport { Player } from '../../../../Data/PlaySession/PlayRoomContext';\nimport { Table } from 'antd';\nimport { comparator } from '../Deck/deck';\nimport { ColumnProps } from 'antd/lib/table';\n\ntype Props = {\n    players: Player[];\n};\nconst columns: ColumnProps<Player>[] = [\n    {\n        title: 'Player',\n        dataIndex: 'info.login',\n        sorter: (a: Player, b: Player) => a.info.login.localeCompare(b.info.login),\n    },\n    {\n        title: 'Story Points',\n        dataIndex: 'score',\n        defaultSortOrder: 'ascend',\n        sorter: (a: Player, b: Player) => comparator(a.score, b.score),\n    },\n];\nexport const TableResult: React.SFC<Props> = ({ players }) => {\n    return (\n        <div>\n            <Table dataSource={players} columns={columns} pagination={false} />\n        </div>\n    );\n};\n","import React, { useContext } from 'react';\nimport { Divider } from 'antd';\n\nimport { PlayRoomContext } from '../../../../Data/PlaySession/PlayRoomContext';\nimport { calculateAverage } from '../../../../utils/average.score';\nimport { TableResult } from '../RoundResults/TableResult';\n\nexport function TableContainer() {\n    const { isRevealing, players, currentStory } = useContext(PlayRoomContext);\n\n    if (currentStory === '' || currentStory === null || !isRevealing) return null;\n    return (\n        <>\n            <Divider>Average Score is {calculateAverage(players)}</Divider>\n            <TableResult players={players} />\n        </>\n    );\n}\n","import React, { useContext } from 'react';\nimport { List, Icon } from 'antd';\nimport { PlayRoomContext } from '../../../../Data/PlaySession/PlayRoomContext';\nimport { Story, StoryId } from './story.type';\n\ntype Props = {\n    story: Story;\n    onSetEditMode: (value: boolean) => void;\n    deleteStory: (id: StoryId) => void;\n    isAdmin: boolean;\n};\n\nexport const Item: React.SFC<Props> = ({ story, onSetEditMode, deleteStory, isAdmin }) => {\n    const { currentStory, actions } = useContext(PlayRoomContext);\n    const isStoryActive = story.id === currentStory;\n\n    const buttonRow = !isAdmin\n        ? []\n        : [\n              isStoryActive ? null : <Icon type=\"star\" onClick={() => actions.setStory(story.id)} />,\n              isStoryActive ? null : <Icon type=\"delete\" onClick={() => deleteStory(story.id)} />,\n              <Icon type=\"edit\" onClick={() => onSetEditMode(true)} />,\n          ].filter(Boolean);\n\n    return (\n        <List.Item\n            actions={buttonRow}\n            style={{\n                backgroundColor: isStoryActive ? '#e6f7fe' : '#fff',\n                padding: '.4rem',\n            }}\n        >\n            <List.Item.Meta\n                title={`${story.title} ${story.score !== 0 ? ` - ${story.score} sp` : ''}`}\n                description={story.description}\n            />\n        </List.Item>\n    );\n};\n","import React from 'react';\nimport { Input, Button, Form } from 'antd';\n\nimport './styles.css';\nimport { useTextField } from '../../../../utils/hooks/useTextField';\n\nexport function ItemEdit({ story, onUpdateStory, onSetEditMode }) {\n    const [newTitle, setTitle] = useTextField(story.title || '');\n    const [newDescription, setDescription] = useTextField(story.description || '');\n\n    const saveItem = e => {\n        e.preventDefault();\n        onUpdateStory({\n            title: newTitle,\n            description: newDescription,\n        });\n        onSetEditMode(false);\n    };\n\n    return (\n        <Form onSubmit={saveItem}>\n            <header className=\"Stories-storyHeader\">\n                <Input placeholder=\"title of the story\" value={newTitle} onChange={setTitle} />\n            </header>\n            <div className=\"Stories-storyDescription\">\n                <Input.TextArea placeholder=\"Description\" value={newDescription} onChange={setDescription} />\n            </div>\n            <footer className=\"Stories-storyFooter\">\n                <Button onClick={() => onSetEditMode(false)}>Cancel</Button>\n                <Button htmlType=\"submit\" type=\"primary\">\n                    Save\n                </Button>\n            </footer>\n        </Form>\n    );\n}\n","import * as React from 'react';\n\nimport { message } from 'antd';\nimport { useAsyncEffect } from '../../utils/hooks/useAsyncEffect';\nimport { ApiClient } from '../../utils/api-client';\nimport { useSocket } from '../../utils/hooks/useSocket';\n\ntype Story = {\n    id: string;\n    description: string;\n    score: number | string;\n    title: string;\n};\n\ntype ContextState = {\n    stories: Story[];\n    actions: {\n        addStories: (title: Array<{ title: string }>) => Promise<void>;\n        updateStory: (story: Story) => Promise<void>;\n        removeStory: (storyId: string) => Promise<void>;\n    };\n};\nexport const StoriesContext = React.createContext<ContextState>({\n    stories: [],\n    actions: {\n        addStories: () => Promise.resolve(),\n        updateStory: () => Promise.resolve(),\n        removeStory: () => Promise.resolve(),\n    },\n});\n\ntype Props = {\n    gameId: string;\n};\n\ntype SocketListeners = {\n    'add-story': (data: { stories: Story[] }) => void;\n    'update-story': (data: { story: Story }) => void;\n    'remove-story': (data: { id: string }) => void;\n};\n\nexport const StoriesProvider: React.SFC<Props> = ({ children, gameId }) => {\n    const [stories, setStories] = React.useState<Story[]>([]);\n    useAsyncEffect(\n        async () => {\n            const { data } = await ApiClient.get(`/api/game/${gameId}`);\n            setStories(data.stories || []);\n        },\n        [gameId],\n    );\n\n    const setUpdatedStoryToStore = (updatedStory: Story): void => {\n        setStories(prevStories =>\n            prevStories.map(story => {\n                if (story.id === updatedStory.id) {\n                    return { ...story, ...updatedStory };\n                }\n                return story;\n            }),\n        );\n    };\n\n    const removeStoryFromState = (id: string) => {\n        setStories(prevStories => prevStories.filter(story => story.id !== id));\n    };\n\n    const emitSocket = useSocket<SocketListeners>({\n        'add-story': ({ stories: newStories }) => {\n            setStories(prevState => prevState.concat(newStories));\n        },\n        'update-story': ({ story }) => {\n            setUpdatedStoryToStore(story);\n        },\n        'remove-story': ({ id }) => {\n            removeStoryFromState(id);\n        },\n    });\n\n    const addStories = async (storiesTitles: Array<{ title: string }>) => {\n        const stories: Partial<Story>[] = storiesTitles.map(story => ({\n            description: '',\n            active: false,\n            score: 0,\n            ...story,\n        }));\n        const { data }: { data: Story[] } = await ApiClient.post('/api/story', { stories, gameId });\n        setStories(prevStories => prevStories.concat(data));\n        emitSocket('emit-add-story', { stories: data });\n    };\n\n    const updateStory = async (story: Story) => {\n        const { data }: { data: Story } = await ApiClient.put('/api/story', story);\n        setUpdatedStoryToStore(data);\n        emitSocket('emit-update-story', { story: data });\n    };\n\n    const removeStory = async (storyId: string) => {\n        try {\n            const { data } = await ApiClient.delete('/api/story', { params: { storyId } });\n            removeStoryFromState(data.id);\n            emitSocket('emit-remove-story', data);\n        } catch (error) {\n            message.error(error.message);\n        }\n    };\n    return (\n        <StoriesContext.Provider value={{ stories, actions: { addStories, updateStory, removeStory } }}>\n            {children}\n        </StoriesContext.Provider>\n    );\n};\n","import React, { useState, useContext } from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\nimport { Item } from './Item';\nimport { ItemEdit } from './Item.form';\nimport { StoriesContext } from '../../../../Data/Stories/StoriesContext';\nimport { Story } from './story.type';\n\ntype OwnProps = {\n    isAdmin: boolean;\n    story: Story;\n};\n\ntype Props = RouteComponentProps & OwnProps;\n\nconst StoryItem: React.SFC<Props> = props => {\n    const [editMode, setEditMode] = useState(false);\n    const { actions } = useContext(StoriesContext);\n    const onUpdateStory = (partialStory: Partial<Story>) => {\n        actions.updateStory({ ...props.story, ...partialStory });\n    };\n\n    return editMode ? (\n        <ItemEdit {...props} onUpdateStory={onUpdateStory} onSetEditMode={setEditMode} />\n    ) : (\n        <Item\n            story={props.story}\n            onSetEditMode={setEditMode}\n            isAdmin={props.isAdmin}\n            deleteStory={actions.removeStory}\n        />\n    );\n};\n\nexport default withRouter(StoryItem);\n","import PropTypes from 'prop-types';\n\nexport const storyType = PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    score: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n});\n","import styled from 'styled-components';\nimport { Card } from 'antd';\n\nconst Wrapper = styled(Card)`\n    width: 100%;\n`;\n\nconst Panel = styled.div`\n    display: flex;\n    flex-direction: column;\n`;\n\nconst FormWrapper = styled.div`\n    margin: 1rem 0;\n`;\n\nexport { Wrapper, Panel, FormWrapper };\n","import React from 'react';\nimport compose from 'ramda/src/compose';\nimport pluck from 'ramda/src/pluck';\nimport sum from 'ramda/src/sum';\nimport { Modal, Button, Table } from 'antd';\n\nconst showTotalScore = compose(\n    sum,\n    pluck('score'),\n);\n\nexport const Report = ({ game, stories, onClose }) => {\n    const columns = [\n        {\n            title: 'Story Tile',\n            dataIndex: 'title',\n            sorter: (a, b) => a.title.localeCompare(b.title),\n        },\n        {\n            title: 'Description',\n            dataIndex: 'description',\n        },\n        {\n            title: 'Story Points',\n            dataIndex: 'score',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.score - b.score,\n        },\n    ];\n    const dataSource = stories.map((story, index) => ({ ...story, key: index }));\n\n    return (\n        <Modal\n            visible={true}\n            title={`Report for \"${game.title}\"`}\n            footer={[\n                <Button onClick={onClose} key=\"ok-button\">\n                    Ok\n                </Button>,\n            ]}\n            onCancel={onClose}\n            width=\"800px\"\n        >\n            <Table\n                dataSource={dataSource}\n                columns={columns}\n                title={() => `Total Score ${showTotalScore(stories)}`}\n                footer={() => `Report generated By FreePlanningPoker`}\n            />\n        </Modal>\n    );\n};\n","import React, { useState, useContext } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport { Report } from './Component';\nimport { useCurrentGame } from '../../../../Data/Games/GamesContext';\nimport { Icon } from 'antd';\nimport { StoriesContext } from '../../../../Data/Stories/StoriesContext';\n\nexport function ReportContainer({ match: { params } }) {\n    const [reportVisibilityStatus, setReportVisibilityStatus] = useState(false);\n    const { stories } = useContext(StoriesContext);\n    const game = useCurrentGame(params.gameID);\n\n    const prepareReport = () => setReportVisibilityStatus(true);\n    const closeReport = () => setReportVisibilityStatus(false);\n\n    return (\n        <>\n            <Icon type=\"printer\" onClick={prepareReport} />\n            {reportVisibilityStatus ? <Report game={game} stories={stories} onClose={closeReport} /> : null}\n        </>\n    );\n}\n\nexport default withRouter(ReportContainer);\n","import React from 'react';\nimport { Tabs, List } from 'antd';\nimport PropTypes from 'prop-types';\nimport partition from 'ramda/src/partition';\nimport length from 'ramda/src/length';\nimport styled from 'styled-components';\n\nimport StoryItem from './StoryItem';\nimport './styles.css';\nimport { storyType } from '../../../../Data/Stories/type';\nimport { Wrapper } from './atoms';\nimport ReportContainer from '../Report/Container';\n\nconst separateStoriesByActivity = partition(story => story.score === 0);\n\nconst StyledList = styled(List)`\n    height: 370px;\n    overflow: scroll;\n`;\n\nconst StoriesPane = ({ stories, admin }) =>\n    length(stories) === 0 ? (\n        <span>No stories</span>\n    ) : (\n        <StyledList\n            itemLayout=\"vertical\"\n            dataSource={stories}\n            renderItem={story => <StoryItem isAdmin={admin} key={story.id} story={story} />}\n        />\n    );\n\nexport const StoryList = ({ stories, admin }) => {\n    const [unplayedStories, playedStories] = separateStoriesByActivity(stories);\n\n    return (\n        <Wrapper title=\"Stories\" extra={length(unplayedStories) === 0 ? <ReportContainer /> : null}>\n            <Tabs defaultActiveKey=\"1\">\n                <Tabs.TabPane tab=\"Remaining\" key=\"1\">\n                    <StoriesPane stories={unplayedStories} admin={admin} />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Played\" key=\"2\">\n                    <StoriesPane stories={playedStories} admin={admin} />\n                </Tabs.TabPane>\n            </Tabs>\n        </Wrapper>\n    );\n};\n\nStoryList.propTypes = {\n    stories: PropTypes.arrayOf(storyType),\n    admin: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport split from 'ramda/src/split';\nimport map from 'ramda/src/map';\nimport { Button, Input } from 'antd';\nimport { FormWrapper } from './atoms';\nimport { useTextField } from '../../../../utils/hooks/useTextField';\n\nexport function StoriesForm({ mode, toggleMode, isAdmin, handleSubmit }) {\n    const [value, setValue] = useTextField('');\n\n    const handleToggleMode = () => toggleMode(!mode);\n\n    const handleKeyPress = ({ charCode }) => {\n        if (charCode !== 13) {\n            return;\n        }\n        const allTasks = map(item => ({ title: item }), split('\\n', value));\n        handleSubmit(allTasks);\n        toggleMode(mode);\n        setValue();\n    };\n\n    if (!isAdmin) {\n        return null;\n    }\n    return (\n        <FormWrapper>\n            {mode ? (\n                <Input.TextArea\n                    placeholder=\"Story title\"\n                    value={value}\n                    onKeyPress={handleKeyPress}\n                    onChange={setValue}\n                />\n            ) : (\n                <Button onClick={handleToggleMode}>Add new Story</Button>\n            )}\n        </FormWrapper>\n    );\n}\n\nStoriesForm.propTypes = {\n    mode: PropTypes.bool.isRequired,\n    isAdmin: PropTypes.bool.isRequired,\n    toggleMode: PropTypes.func.isRequired,\n    handleSubmit: PropTypes.func.isRequired,\n};\n","import React, { useState, useContext } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport { StoryList } from './List';\nimport './styles.css';\nimport { Panel } from './atoms';\nimport { StoriesForm } from './Form';\nimport { StoriesContext } from '../../../../Data/Stories/StoriesContext';\n\nexport const StoriesContainer = withRouter(function StoriesContainer({ admin, match: { params } }) {\n    const [isAddingStoryMode, setMode] = useState(false);\n    const { stories, actions } = useContext(StoriesContext);\n\n    return (\n        <Panel>\n            <StoryList stories={stories} admin={admin} />\n            <StoriesForm\n                handleSubmit={actions.addStories}\n                toggleMode={setMode}\n                isAdmin={admin}\n                mode={isAddingStoryMode}\n            />\n        </Panel>\n    );\n});\n","import React, { useContext, useState } from 'react';\nimport { Modal, Input, Form, Switch, Icon } from 'antd';\nimport { useTextField } from '../../../../utils/hooks/useTextField';\nimport { AuthContext } from '../../../../Data/Auth/AuthContext';\n\nexport const TemporaryLoginForm = ({ history: { replace } }) => {\n    const [login, setLogin] = useTextField('');\n    const [gender, setGender] = useState('male');\n    const { setTempUser } = useContext(AuthContext);\n\n    const onSubmit = event => {\n        event.preventDefault();\n        setTempUser(login, gender);\n    };\n    const handleChange = switchValue => setGender(switchValue ? 'female' : 'male');\n    return (\n        <div>\n            <Modal visible={true} title=\"Sit a game in progress\" onCancel={() => replace('/')} onOk={onSubmit}>\n                <Form.Item label=\"Login\" labelCol={{ span: 6 }} wrapperCol={{ span: 14 }}>\n                    <Input id=\"login\" name=\"login\" placeholder=\"Your desired login\" value={login} onChange={setLogin} />\n                </Form.Item>\n                <Form.Item label=\"Gender\" labelCol={{ span: 6 }} wrapperCol={{ span: 14 }}>\n                    <Switch\n                        checked={gender === 'female'}\n                        onChange={handleChange}\n                        checkedChildren={<Icon type=\"man\" />}\n                        unCheckedChildren={<Icon type=\"woman\" />}\n                    />\n                </Form.Item>\n            </Modal>\n        </div>\n    );\n};\n","import styled from 'styled-components';\n\nexport const UserList = styled.ul`\n    list-style-type: none;\n    padding: 1rem;\n    background-color: #fff;\n    display: flex;\n    flex-wrap: wrap;\n`;\nexport const UserItem = styled.li`\n    padding: 0.8rem;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    position: relative;\n`;\nexport const UserAvatar = styled('div')<{ avatar: string }>`\n    width: 6.6rem;\n    height: 6.6rem;\n    background-image: url(${({ avatar }) => avatar});\n    background-size: contain;\n    border-radius: 50%;\n`;\n\nexport const UserDefaultAvatar = styled('div')<{ avatar: number }>`\n    width: 6.6rem;\n    height: 6.6rem;\n    background-image: url(/assets/avatars.jpg);\n    background-position-y: ${({ avatar }) => `-${55 + Math.floor(avatar / 6) * 130}px`};\n    background-position-x: ${({ avatar }) => `-${15 + ((avatar + 6) % 6) * 95}px`};\n    background-size: 600px;\n`;\nexport const UserName = styled.div`\n    text-align: center;\n`;\n\nexport const UserScore = styled.div`\n    position: absolute;\n    left: calc(50% + 2rem);\n    top: 0.5rem;\n    width: 2rem;\n    height: 2rem;\n    background-color: #52c41a;\n    color: #fff;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 50%;\n`;\n","import * as React from 'react';\nimport * as Atoms from './atoms';\nimport { PlayRoomContext, Player } from '../../../../Data/PlaySession/PlayRoomContext';\n\ntype Props = {\n    user: Player;\n};\n\nconst renderScore = (score: string | number, shouldShowScore: boolean): string => {\n    if (!shouldShowScore) {\n        return '?';\n    }\n    if (typeof score === 'number') {\n        return score.toString();\n    }\n    return score[0];\n};\n\nexport const PlayerComponent: React.SFC<Props> = ({ user }) => {\n    const { isRevealing } = React.useContext(PlayRoomContext);\n    const { picture, login } = user.info;\n    return (\n        <Atoms.UserItem>\n            {typeof picture === 'number' ? (\n                <Atoms.UserDefaultAvatar avatar={picture} />\n            ) : (\n                <Atoms.UserAvatar avatar={picture} />\n            )}\n            <Atoms.UserName>{login}</Atoms.UserName>\n            {user.score !== null ? <Atoms.UserScore>{renderScore(user.score, isRevealing)}</Atoms.UserScore> : null}\n        </Atoms.UserItem>\n    );\n};\n","import * as React from 'react';\nimport * as Atoms from './atoms';\nimport { PlayRoomContext } from '../../../../Data/PlaySession/PlayRoomContext';\nimport { PlayerComponent } from './Player';\n\nexport const PlayersList: React.SFC<{}> = () => {\n    const { players } = React.useContext(PlayRoomContext);\n    return (\n        <Atoms.UserList>\n            {players.map((player, index) => (\n                <PlayerComponent key={index} user={player} />\n            ))}\n        </Atoms.UserList>\n    );\n};\n","import styled from 'styled-components';\nexport const GridWrapper = styled.section`\n    display: grid;\n    padding: 1rem;\n    width: 100%;\n    height: 100%;\n    grid-gap: 2rem;\n    grid-template-columns: 20rem 1fr;\n    grid-template-rows: 2rem max-content auto;\n`;\n\nexport const GridHeader = styled.header`\n    grid-column: 1 / span 2;\n`;\n\nexport const GridStories = styled.section`\n    grid-row: 2 / span 2;\n`;\n\nexport const GridPlayers = styled.section`\n    grid-row: 2 / span 1;\n`;\n\nexport const GridDeck = styled.section`\n    grid-row: 3 / span 1;\n`;\n","import styled from 'styled-components';\nimport { Badge } from 'antd';\n\nexport const InputGroup = styled.div`\n    display: flex;\n    justify-content: space-between;\n`;\n\nexport const ChatButton = styled(Badge)``;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Divider, Button, Input } from 'antd';\nimport { InputGroup } from './atoms';\nimport { useTextField } from '../../../../utils/hooks/useTextField';\n\nexport function ChatInputArea({ onSendMessage }) {\n    const [value, setValue] = useTextField('');\n\n    const handleSubmit = () => {\n        if (value === '') return;\n        onSendMessage(value);\n        setValue();\n    };\n\n    const handleKeyDown = event => {\n        if (event.charCode === 13) {\n            return handleSubmit();\n        }\n    };\n\n    return (\n        <>\n            <Divider />\n            <InputGroup>\n                <Input name=\"chat\" onKeyPress={handleKeyDown} value={value} onChange={setValue} />\n                <Button\n                    type=\"primary\"\n                    shape=\"circle\"\n                    icon=\"enter\"\n                    onClick={handleSubmit}\n                    style={{ flexShrink: 0, marginLeft: '0.6rem' }}\n                />\n            </InputGroup>\n        </>\n    );\n}\n\nChatInputArea.propTypes = {\n    onSendMessage: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { List, Avatar } from 'antd';\n\nexport const ChatMessage = ({ user, message, style }) => {\n    return (\n        <List.Item style={style}>\n            <List.Item.Meta avatar={<Avatar src={user.picture} />} title={user.name} description={message} />\n        </List.Item>\n    );\n};\n\nChatMessage.propTypes = {\n    user: PropTypes.shape({\n        login: PropTypes.string.isRequired,\n    }),\n    message: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { List, AutoSizer } from 'react-virtualized';\n\nimport { ChatMessage } from './ChatMessage';\n\nexport const ChatThread = ({ threads }) => {\n    const renderRow = ({ index, key, style }) => {\n        return <ChatMessage {...threads[index]} key={key} style={style} />;\n    };\n\n    const getRowHeight = ({ index }) => {\n        const { message } = threads[index];\n        const messageLength = message.length;\n        return 60 + (Math.floor(messageLength / 50) + 1) * 20;\n    };\n\n    return (\n        <div style={{ flexGrow: 1 }}>\n            <AutoSizer>\n                {({ width, height }) => (\n                    <List\n                        rowCount={threads.length}\n                        width={width}\n                        height={height}\n                        rowHeight={getRowHeight}\n                        rowRenderer={renderRow}\n                        scrollToIndex={threads.length - 1}\n                    />\n                )}\n            </AutoSizer>\n        </div>\n    );\n};\n\nChatThread.propTypes = {\n    threads: PropTypes.arrayOf(\n        PropTypes.shape({\n            user: PropTypes.shape({\n                login: PropTypes.string.isRequired,\n            }),\n            message: PropTypes.string.isRequired,\n        }),\n    ),\n};\n","import React, { useContext, useState } from 'react';\nimport { Drawer, Button } from 'antd';\n\nimport { ChatInputArea } from './ChatInputArea';\nimport { ChatThread } from './ChatThread';\nimport { AuthContext } from '../../../../Data/Auth/AuthContext';\nimport { ChatButton } from './atoms';\nimport { useSocket } from '../../../../utils/hooks/useSocket';\n\nexport function Chat() {\n    const { user } = useContext(AuthContext);\n    const [messages, addMessage] = useState([]);\n    const [isOpened, setOpen] = useState(false);\n    const [unreadMessages, setUnreadMessages] = useState(messages.length);\n    if (isOpened && unreadMessages !== 0) {\n        setUnreadMessages(0);\n    }\n    const addMessageToStore = message => {\n        addMessage(prevMessages => {\n            return [...prevMessages, message];\n        });\n    };\n    const emitMessage = useSocket({\n        'message-received': message => {\n            setUnreadMessages(prev => prev + 1);\n            addMessageToStore(message);\n        },\n    });\n    const sendMessage = message => {\n        const newMessage = { user: user.info, message };\n        addMessageToStore(newMessage);\n        emitMessage('send-message', newMessage);\n    };\n    return (\n        <>\n            <ChatButton count={unreadMessages}>\n                <Button onClick={() => setOpen(true)} type=\"primary\" shape=\"circle\" icon=\"message\" size=\"large\" />\n            </ChatButton>\n            <Drawer\n                width={520}\n                placement=\"right\"\n                closable={false}\n                onClose={() => setOpen(false)}\n                visible={isOpened}\n                mask={true}\n                style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    height: '100%',\n                }}\n            >\n                <ChatThread threads={messages} />\n                <ChatInputArea onSendMessage={sendMessage} />\n            </Drawer>\n        </>\n    );\n}\n","import styled from 'styled-components';\n\nexport const FloatContainer = styled('div')`\n    position: fixed !important;\n    right: 2rem;\n    bottom: 2rem;\n    display: flex;\n    flex-direction: column;\n\n    & > * {\n        margin: 0.5rem 0rem !important;\n    }\n`;\n","import React, { useContext } from 'react';\nimport { Chat } from '../Chat';\nimport { PlayRoomContext } from '../../../../Data/PlaySession/PlayRoomContext';\nimport { FloatContainer } from './atoms';\nimport { Icon, Button, Tooltip } from 'antd';\nimport { StoriesContext } from '../../../../Data/Stories/StoriesContext';\nimport { calculateAverage } from '../../../../utils/average.score';\n\nexport const ActionButtons = () => {\n    const { currentStory, isRevealing, isCompleted, players, actions } = useContext(PlayRoomContext);\n\n    const { actions: storiesActions, stories } = useContext(StoriesContext);\n    const activeStory = stories.find(story => story.id === currentStory);\n    const isStoryActive = currentStory !== '' && currentStory !== null;\n    const resetCurrentStory = () => actions.setStory(null);\n    const setScore = () => {\n        if (activeStory) {\n            storiesActions.updateStory({\n                ...activeStory,\n                score: calculateAverage(players),\n            });\n            resetCurrentStory();\n        }\n    };\n    return (\n        <FloatContainer>\n            {isStoryActive && !isCompleted ? (\n                <Tooltip title=\"Start the game round\" placement=\"left\">\n                    <Button\n                        onClick={actions.startPlayRound}\n                        type=\"primary\"\n                        shape=\"circle\"\n                        icon=\"play-circle\"\n                        size=\"large\"\n                    />\n                </Tooltip>\n            ) : null}\n            {isCompleted && !isRevealing ? (\n                <Tooltip title=\"Reveal user scores\" placement=\"left\">\n                    <Button\n                        onClick={actions.showPlayedCards}\n                        type=\"primary\"\n                        shape=\"circle\"\n                        icon=\"question-circle\"\n                        size=\"large\"\n                    />\n                </Tooltip>\n            ) : null}\n            {isRevealing ? (\n                <Tooltip title=\"Set the final score\" placement=\"left\">\n                    <Button onClick={setScore} type=\"primary\" shape=\"circle\" icon=\"check-circle\" size=\"large\" />\n                </Tooltip>\n            ) : null}\n            {isRevealing ? (\n                <Tooltip title=\"Play another round for the story\" placement=\"left\">\n                    <Button onClick={actions.startPlayRound} type=\"primary\" shape=\"circle\" icon=\"reload\" size=\"large\" />\n                </Tooltip>\n            ) : null}\n            {isStoryActive ? (\n                <Tooltip title=\"Reset the progress and pick another story\" placement=\"left\">\n                    <Button onClick={resetCurrentStory} type=\"danger\" shape=\"circle\" icon=\"close-circle\" size=\"large\" />\n                </Tooltip>\n            ) : null}\n            <Chat />\n        </FloatContainer>\n    );\n};\n","import React, { useEffect, useContext } from 'react';\nimport { message } from 'antd';\n\nimport { DeckContainer } from './Components/Deck';\nimport { TableContainer } from './Components/Table/Container';\nimport { StoriesContainer } from './Components/Stories/Container';\nimport { TemporaryLoginForm } from './Components/Player/TemporaryLoginForm';\nimport { useAsyncEffect } from '../../utils/hooks/useAsyncEffect';\nimport { GamesContext, useCurrentGame } from '../../Data/Games/GamesContext';\nimport { PlayRoomProvider, PlayRoomContext } from '../../Data/PlaySession/PlayRoomContext';\nimport { StoriesProvider } from '../../Data/Stories/StoriesContext';\nimport { AuthContext, LOGIN_STATUS, checkIsAdmin } from '../../Data/Auth/AuthContext';\nimport { ApiClient } from '../../utils/api-client';\nimport { PlayersList } from './Components/Player/PlayersList';\nimport * as Atoms from './atoms';\nimport { ActionButtons } from './Components/ActionButton/ActionButtons';\n\nexport const BoardContainer = ({ match }) => {\n    const { user } = useContext(AuthContext);\n    const { isPlaying, actions } = useContext(PlayRoomContext);\n    const { updateGame } = useContext(GamesContext);\n    const currentGameId = match.params.gameID;\n    const game = useCurrentGame(currentGameId);\n    useEffect(() => {\n        actions.enterRoom({\n            info: {\n                login: user.info.name,\n                picture: user.info.picture,\n            },\n        });\n        return actions.leaveRoom;\n    }, []);\n    useAsyncEffect(\n        async () => {\n            try {\n                const { data } = await ApiClient.get(`/api/game/${currentGameId}`);\n                updateGame(data);\n            } catch (error) {\n                message.error(error.message);\n            }\n        },\n        [currentGameId],\n    );\n    const isAdmin = checkIsAdmin(user, match.params.user);\n    if (!game) {\n        return <h1>No game</h1>;\n    }\n    return (\n        <StoriesProvider gameId={currentGameId}>\n            <Atoms.GridWrapper>\n                <Atoms.GridHeader>\n                    <h2>{game.title}</h2>\n                </Atoms.GridHeader>\n                <Atoms.GridStories>\n                    <StoriesContainer admin={isAdmin} />\n                </Atoms.GridStories>\n                <Atoms.GridPlayers>\n                    <PlayersList />\n                </Atoms.GridPlayers>\n                <Atoms.GridDeck>\n                    <TableContainer admin={isAdmin} />\n                    {isPlaying ? <DeckContainer /> : null}\n                </Atoms.GridDeck>\n            </Atoms.GridWrapper>\n            <ActionButtons />\n        </StoriesProvider>\n    );\n};\n\nexport default function BranchBoard(props) {\n    const { user } = useContext(AuthContext);\n    const isAdmin = checkIsAdmin(user, props.match.params.user);\n    if ([LOGIN_STATUS.LOGGED_IN, LOGIN_STATUS.TEMP_USER].includes(user.loginStatus)) {\n        return (\n            <PlayRoomProvider gameId={props.match.params.gameID} isAdmin={isAdmin}>\n                <BoardContainer {...props} />\n            </PlayRoomProvider>\n        );\n    }\n    return <TemporaryLoginForm {...props} />;\n}\n"],"sourceRoot":""}